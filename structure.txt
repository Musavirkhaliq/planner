.
├── app
│   ├── analytics
│   │   ├── __pycache__
│   │   ├── router.py
│   │   ├── schemas.py
│   │   └── services.py
│   ├── api_router.py
│   ├── auth
│   │   ├── dependencies.py
│   │   ├── oauth.py
│   │   ├── __pycache__
│   │   ├── router.py
│   │   └── services.py
│   ├── config.py
│   ├── database.py
│   ├── dependencies.py
│   ├── goals
│   │   ├── __pycache__
│   │   ├── router.py
│   │   ├── schemas.py
│   │   └── services.py
│   ├── __init__.py
│   ├── main.py
│   ├── models.py
│   ├── __pycache__
│   ├── tasks
│   │   ├── __pycache__
│   │   ├── router.py
│   │   ├── schemas.py
│   │   └── services.py
│   ├── time_slots
│   │   ├── __pycache__
│   │   ├── router.py
│   │   ├── schemas.py
│   │   └── services.py
│   ├── users
│   │   ├── __pycache__
│   │   ├── router.py
│   │   ├── schemas.py
│   │   └── services.py
│   ├── utils.py
│   └── web_router.py
├── app.db
├── frontend
│   ├── static
│   │   ├── img
│   │   │   ├── planner_logo_100x100.png
│   │   │   ├── planner_logo800x800.png
│   │   │   └── planner_logo.svg
│   │   ├── script.js
│   │   ├── style.css
│   │   └── time-slot-manager.js
│   └── templates
│       ├── analytics.html
│       ├── callback.html
│       ├── dashboard.html
│       ├── index.html
│       ├── login.html
│       └── register.html
├── __init__.py


\n\n./makedir.py:\n
import os

# Define the directory structure
structure = {
    'app': {
        '__init__.py': '',
        'auth.py': '',
        'config.py': '',
        'crud.py': '',
        'database.py': '',
        'dependencies.py': '',
        'main.py': '',
        'models.py': '',
        'schemas.py': '',
        'utils.py': ''
    },
    'frontend': {
        'static': {
            'script.js': '',
            'style.css': ''
        },
        'templates': {
            'dashboard.html': '',
            'index.html': '',
            'login.html': '',
            'register.html': ''
        }
    }
}

# Create the directory structure
for root, dirs in structure.items():
    os.mkdir(root)
    for file, content in dirs.items():
        if isinstance(content, dict):
            for subfile, subcontent in content.items():
                filepath = os.path.join(root, file, subfile)
                os.makedirs(os.path.dirname(filepath), exist_ok=True)
                open(filepath, 'w').close()
        else:
            filepath = os.path.join(root, file)
            open(filepath, 'w').close()
\n\n./__init__.py:\n
from app.database import Base, engine

# Drop all tables and recreate them
Base.metadata.drop_all(bind=engine)
Base.metadata.create_all(bind=engine)
\n\n./frontend/static/script.js:\n
// frontend/static/script.js

// ---------- LOGIN & REGISTER FUNCTIONS -----------
async function submitForm(e, url, formData, isJson = true) {
    e.preventDefault();
    try {
        const response = await fetch(url, {
            method: "POST",
            headers: isJson ? { "Content-Type": "application/json" } : { "Content-Type": "application/x-www-form-urlencoded" },
            body: isJson ? JSON.stringify(formData) : new URLSearchParams(formData)
        });
        if (response.ok) {
             let result = await response.json();
             if (result.message) {
                if (result.message === "verify_email") {
                    window.location.href = `/verify-email?email=${result.email}`;
                }
             }
             return result;
        } else {
            const errorData = await response.json();
            alert(`Error: ${errorData.detail || "Unknown error"}`);
        }
    } catch (error) {
        console.error("Error during form submission:", error);
        alert("An error occurred. Please try again.");
    }
}

// Login Form Submission
document.getElementById("loginForm")?.addEventListener("submit", async (e) => {
    const email = document.getElementById("email").value;
    const password = document.getElementById("password").value;
    const data = await submitForm(e, "/api/auth/token", { username: email, password: password }, false);
    if (data && data.access_token) {
        localStorage.setItem("access_token", data.access_token);
        window.location.href = "/dashboard";
    }
});

// Register Form Submission
document.getElementById("registerForm")?.addEventListener("submit", async (e) => {
    const email = document.getElementById("email").value;
    const username = document.getElementById("username").value;
    const password = document.getElementById("password").value;
    const data = await submitForm(e, "/api/users/", { email, username, password });
    if (data) {
        // Redirect to email verification page
        window.location.href = `/verify-email?email=${encodeURIComponent(email)}`;
    }
});

// ---------- DASHBOARD FUNCTIONS -----------
async function fetchWithAuth(url, options = {}) {
    const token = localStorage.getItem("access_token");
    if (!token) {
        window.location.href = "/login";
        return;
    }
    options.headers = {
        ...(options.headers || {}),
        "Authorization": `Bearer ${token}`
    };
    return await fetch(`/api${url}`, options);
}

// Time Slot Booking
async function bookTimeSlot() {
    const task = document.getElementById("task").value;
    const startTime = document.getElementById("startTime").value;
    const endTime = document.getElementById("endTime").value;
    // Create a description from the task
    const description = task;
    const response = await fetchWithAuth("/api/time_slots/", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ start_time: startTime, end_time: endTime, description })
    });
    if (response && response.ok) {
        window.location.reload();
    } else {
        alert("Failed to book time slot");
    }
}

// Goals & Breakdown: add a goal
async function addGoal() {
    const goal = document.getElementById("goal").value;
    if (!goal) return;
    const response = await fetchWithAuth("/goals/", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ title: goal, description: "" })
    });
    if (response && response.ok) {
        window.location.reload();
    } else {
        alert("Failed to add goal");
    }
}
//on clicking done insert the  data

document.addEventListener("DOMContentLoaded", () => {
  const checkboxes = document.querySelectorAll('.doneCheckbox');

  checkboxes.forEach(checkbox => {
      checkbox.addEventListener('click', async (event) => {
          const row = event.target.closest('tr');
          const time = row.cells[0].textContent;
          const done = event.target.checked;
          const task = row.cells[2].textContent;
          const report = row.cells[3].querySelector('.reportInput').value;
          const progress = row.cells[4].querySelector('progress').value;
          const rating = row.cells[5].querySelector('.ratingInput').value;

          if (done) {
              const taskData = {
                  time,
                  task,
                  report,
                  progress,
                  rating
              };

              // Send data to server
              const response = await fetchWithAuth('/tasks/', {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(taskData)
              });

              if (response.ok) {
                  alert('Task marked as done and report submitted successfully!');
                  // Optionally, refresh the dashboard or update the UI
              } else {
                  alert('Failed to submit report');
              }
          }
      });
  });

  async function fetchWithAuth(url, options = {}) {
      // Add authentication headers if needed
      const token = localStorage.getItem('token');
      if (token) {
          options.headers = {
              ...options.headers,
              'Authorization': `Bearer ${token}`
          };
      }
      const response = await fetch(url, options);
      return response;
  }
});


// Load Tasks for the To-Do List
document.addEventListener("DOMContentLoaded", async () => {
    // Load tasks into the taskList element if present
    const taskList = document.getElementById("taskList");
    if (taskList) {
        const response = await fetchWithAuth("/tasks/");
        if (response.ok) {
            const tasks = await response.json();
            tasks.forEach(task => {
                const li = document.createElement("li");
                li.textContent = `${task.title}: ${task.description} - Time Spent: ${task.time_spent} hours`;
                taskList.appendChild(li);
            });
        } else {
            alert("Failed to fetch tasks");
        }
    }

    // Load Analytics Chart if canvas present

});


// frontend/static/script.js

document.addEventListener("DOMContentLoaded", () => {
  if (document.querySelector('.hours')) {
    initAuth();
    initTimeSlotForm();
    initBookingDatePicker();
    // Initially load bookings for today
    const today = new Date().toISOString().split("T")[0];
    document.getElementById("bookingDate").value = today;
    loadTimeSlotsByDate(today);
    // fetchAnalytics(today, today);
  }
});
  
  // ---------- AUTH FUNCTIONS ----------
  function initAuth() {
    const logoutBtn = document.getElementById("logoutBtn");
    if (logoutBtn) {
      logoutBtn.addEventListener("click", () => {
        localStorage.removeItem("access_token");
        window.location.href = "/login";
      });
    }
  }
  
  // ---------- TIME SLOT BOOKING FUNCTIONS ----------
  
  // Initialize date picker to reload table when a new date is chosen.
  function initBookingDatePicker() {
    const bookingDateInput = document.getElementById("bookingDate");
    if (bookingDateInput) {
        bookingDateInput.addEventListener("change", (e) => {
            const selectedDate = e.target.value;
            loadTimeSlotsByDate(selectedDate);
            // fetchAnalytics(selectedDate, selectedDate);
        });
    }
}
  
  // Submit the new time slot form.
  function initTimeSlotForm() {
    const timeSlotForm = document.getElementById("timeSlotForm");
    if (timeSlotForm) {
        timeSlotForm.addEventListener("submit", async (e) => {
            e.preventDefault();
            const startTime = document.getElementById("startTime").value;
            const endTime = document.getElementById("endTime").value;
            const task = document.getElementById("task").value;
            const bookingDate = document.getElementById("bookingDate").value;
            const token = localStorage.getItem("access_token");

            const payload = {
                start_time: `${bookingDate}T${startTime}`,
                end_time: `${bookingDate}T${endTime}`,
                description: task,
                date: bookingDate
            };

            const isEditing = timeSlotForm.dataset.editingId;
            const url = isEditing 
                ? `/api/time_slots/${timeSlotForm.dataset.editingId}`
                : "/api/time_slots";  // Remove trailing slash
            const method = isEditing ? "PUT" : "POST";

            try {
                const response = await fetch(url, {
                    method: method,
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": `Bearer ${token}`,
                    },
                    body: JSON.stringify(payload),
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.detail || 'Failed to save time slot');
                }

                // Reset form and update table
                timeSlotForm.reset();
                delete timeSlotForm.dataset.editingId;
                
                // Reset submit button
                const submitBtn = timeSlotForm.querySelector('button[type="submit"]');
                submitBtn.innerHTML = '<i class="fas fa-plus me-2"></i>Add';
                submitBtn.classList.remove('btn-success');
                submitBtn.classList.add('btn-primary');
                
                // Reapply the selected date and reload table
                document.getElementById("bookingDate").value = bookingDate;
                await loadTimeSlotsByDate(bookingDate);
                
                // Update analytics after successful save
                fetchTodayAnalytics();
            } catch (error) {
                console.error('Error saving time slot:', error);
                alert(error.message || 'Failed to save time slot. Please try again.');
            }
        });
    }
}
  
  // Render the time slot table rows.
  // Render the time slot table rows with edit and delete functionality
function renderTimeSlotTable(slots) {
  const tableBody = document.querySelector("#timeSlotTable tbody");
  tableBody.innerHTML = "";

  slots.forEach((slot) => {
      const start = new Date(slot.start_time);
      const end = new Date(slot.end_time);
      const allottedMinutes = Math.round((end - start) / 60000);
      const reportedMinutes = slot.report_minutes || 0;
      const progressPercent = Math.min(100, Math.round((reportedMinutes / allottedMinutes) * 100));
      const ratingStars = "★".repeat(Math.max(1, Math.round(progressPercent / 20)));

      const tr = document.createElement("tr");
      tr.setAttribute("data-slot-id", slot.id);

      // TIME
      const timeTd = document.createElement("td");
      timeTd.textContent = `${start.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })} - ${end.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}`;
      tr.appendChild(timeTd);

      // STATUS
      const statusTd = document.createElement("td");
      const statusSelect = document.createElement("select");
      statusSelect.className = "statusSelect form-select form-select-sm";
      statusSelect.innerHTML = `
          <option value="completed" ${slot.status === 'completed' ? 'selected' : ''}>Completed</option>
          <option value="in_progress" ${slot.status === 'in_progress' ? 'selected' : ''}>In Progress</option>
          <option value="not_started" ${slot.status === 'not_started' ? 'selected' : ''}>Not Started</option>
      `;
      statusSelect.addEventListener("change", async () => {
          const newStatus = statusSelect.value;
          await updateTimeSlotField(slot.id, { status: newStatus });
      });
      statusTd.appendChild(statusSelect);
      tr.appendChild(statusTd);

      // TASK
      const descTd = document.createElement("td");
      descTd.textContent = slot.description;
      tr.appendChild(descTd);

      // REPORT
      const reportTd = document.createElement("td");
      const reportInput = document.createElement("input");
      reportInput.type = "number";
      reportInput.min = 0;
      reportInput.value = reportedMinutes;
      reportInput.className = "form-control form-control-sm";
      reportInput.style.width = "80px";
      reportInput.addEventListener("change", () => {
          updateTimeSlotReport(slot.id, parseInt(reportInput.value), allottedMinutes);
      });
      reportTd.appendChild(reportInput);
      tr.appendChild(reportTd);

      // PROGRESS
      const progressTd = document.createElement("td");
      const progressDiv = document.createElement("div");
      progressDiv.className = "progress";
      const progressBar = document.createElement("div");
      progressBar.className = "progress-bar";
      progressBar.style.width = `${progressPercent}%`;
      progressBar.textContent = `${progressPercent}%`;
      progressDiv.appendChild(progressBar);
      progressTd.appendChild(progressDiv);
      tr.appendChild(progressTd);

      // RATING
      const ratingTd = document.createElement("td");
      ratingTd.textContent = ratingStars;
      tr.appendChild(ratingTd);

      // ACTIONS
      const actionsTd = document.createElement("td");
      actionsTd.className = "text-end";
      actionsTd.innerHTML = `
          <div class="btn-group btn-group-sm">
              <button class="btn btn-outline-primary edit-slot" title="Edit">
                  <i class="fas fa-edit"></i>
              </button>
              <button class="btn btn-outline-danger delete-slot" title="Delete">
                  <i class="fas fa-trash-alt"></i>
              </button>
          </div>
      `;

      // Add event listeners for edit and delete
      const editBtn = actionsTd.querySelector('.edit-slot');
      const deleteBtn = actionsTd.querySelector('.delete-slot');

      editBtn.addEventListener('click', () => handleEdit(slot));
      deleteBtn.addEventListener('click', () => handleDelete(slot.id));

      tr.appendChild(actionsTd);
      tableBody.appendChild(tr);
  });
}


// Handle edit functionality
// Handle edit functionality
async function handleEdit(slot) {
  // Convert ISO datetime to date and time parts
  const startDateTime = new Date(slot.start_time);
  const endDateTime = new Date(slot.end_time);
  
  // Set form values
  document.getElementById('bookingDate').value = startDateTime.toISOString().split('T')[0];
  document.getElementById('startTime').value = startDateTime.toTimeString().slice(0, 5);
  document.getElementById('endTime').value = endDateTime.toTimeString().slice(0, 5);
  document.getElementById('task').value = slot.description;

  // Change form submit button
  const submitBtn = document.querySelector('#timeSlotForm button[type="submit"]');
  submitBtn.innerHTML = '<i class="fas fa-save me-2"></i>Update';
  submitBtn.classList.remove('btn-primary');
  submitBtn.classList.add('btn-success');
  
  // Store the slot ID being edited
  timeSlotForm.dataset.editingId = slot.id;
  
  // Scroll to form
  timeSlotForm.scrollIntoView({ behavior: 'smooth' });
}

// Handle delete functionality
async function handleDelete(slotId) {
  if (!confirm('Are you sure you want to delete this time slot?')) {
      return;
  }

  const token = localStorage.getItem('access_token');
  try {
      const response = await fetch(`/api/time_slots/${slotId}`, {
          method: 'DELETE',
          headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
          }
      });

      if (response.status === 204) {  // No Content response
          // Find and remove the row with animation
          const row = document.querySelector(`tr[data-slot-id="${slotId}"]`);
          if (row) {
              row.style.transition = 'opacity 0.3s';
              row.style.opacity = '0';
              setTimeout(() => {
                  row.remove();
                  // Update analytics after successful deletion
                  fetchTodayAnalytics();
              }, 300);
          }
      } else {
          const errorData = await response.json();
          throw new Error(errorData.detail || 'Failed to delete time slot');
      }
  } catch (error) {
      console.error('Error deleting time slot:', error);
      alert(error.message || 'Failed to delete time slot. Please try again.');
  }
}


async function updateTimeSlotField(slotId, data) {
  const token = localStorage.getItem("access_token");
  try {
      const response = await fetch(`/api/time_slots/${slotId}`, {
          method: "PATCH",
          headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify(data),
      });
      if (!response.ok) {
          alert("Failed to update time slot status");
      }
  } catch (error) {
      console.error("Error updating time slot status:", error);
      alert("An error occurred. Please try again.");
  }
}

  
  // When the report minutes input changes, update the booking.
  async function updateTimeSlotReport(slotId, reportMinutes, allottedMinutes) {
    const token = localStorage.getItem("access_token");
    // Calculate progress & rating on the front end for immediate feedback.
    const progressPercent = Math.min(
      100,
      Math.round((reportMinutes / allottedMinutes) * 100)
    );
    // Build star rating: use at least 1 star.
    const ratingStars = "★".repeat(Math.max(1, Math.round(progressPercent / 20)));
  
    // Find the row in the table and update its progress bar and rating cells.
    const row = document.querySelector(`tr[data-slot-id="${slotId}"]`);
    if (row) {
      const progressBar = row.children[4].querySelector(".progress-bar");
      progressBar.style.width = `${progressPercent}%`;
      progressBar.textContent = `${progressPercent}%`;
      row.children[5].textContent = ratingStars;
    }
  
    // Send the updated report value to the back‑end.
    // (Assuming your back‑end supports PATCH updates for time slot bookings.)
    const response = await fetch(`/api/time_slots/${slotId}`, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify({ report_minutes: reportMinutes }),
    });
    if (!response.ok) {
      alert("Failed to update report minutes");
    }
  }
  
// --------------------------
// POMODORO TIMER FUNCTIONS
// --------------------------
let workTime = 25 * 60; // default work time in seconds
let breakTime = 5 * 60; // default break time in seconds
let timerInterval;
let isWorking = true;
let lastTimestamp;
let ws;

// WebSocket setup
function initializeWebSocket() {
  ws = new WebSocket('wss://your-websocket-server.com'); //  WebSocket server

  ws.onmessage = (event) => {
    const data = JSON.parse(event.data);
    syncTimerState(data);
  };

  ws.onclose = () => {
    // Attempt to reconnect
    setTimeout(initializeWebSocket, 1000);
  };
}

// Timer state management
function saveTimerState(remainingTime, isWorking, isActive) {
  const state = {
    remainingTime,
    isWorking,
    isActive,
    timestamp: Date.now()
  };
  localStorage.setItem('pomodoroState', JSON.stringify(state));
  
  // Broadcast state to other clients if WebSocket is connected
  if (ws && ws.readyState === WebSocket.OPEN) {
    ws.send(JSON.stringify(state));
  }
}

function loadTimerState() {
  const savedState = localStorage.getItem('pomodoroState');
  if (savedState) {
    const state = JSON.parse(savedState);
    const elapsedTime = Math.floor((Date.now() - state.timestamp) / 1000);
    
    // Adjust remaining time based on elapsed time since last save
    if (state.isActive) {
      state.remainingTime = Math.max(0, state.remainingTime - elapsedTime);
    }
    
    return state;
  }
  return null;
}

function syncTimerState(state) {
  isWorking = state.isWorking;
  if (state.isActive) {
    const display = document.querySelector("#time");
    const progressBar = document.querySelector("#progress");
    if (display && progressBar) {
      startTimer(state.remainingTime, display, progressBar);
    }
  }
}

function updateTimerDurationsFromInputs() {
  const workInput = document.getElementById("workTime");
  const breakInput = document.getElementById("breakTime");

  const workMinutes = workInput && workInput.value ? parseInt(workInput.value, 10) : 25;
  const breakMinutes = breakInput && breakInput.value ? parseInt(breakInput.value, 10) : 5;

  workTime = workMinutes * 60;
  breakTime = breakMinutes * 60;
  
  // Save new durations to localStorage
  localStorage.setItem('pomodoroSettings', JSON.stringify({ workTime, breakTime }));
}

function loadSettings() {
  const savedSettings = localStorage.getItem('pomodoroSettings');
  if (savedSettings) {
    const settings = JSON.parse(savedSettings);
    workTime = settings.workTime;
    breakTime = settings.breakTime;
    
    // Update input fields
    const workInput = document.getElementById("workTime");
    const breakInput = document.getElementById("breakTime");
    if (workInput) workInput.value = Math.floor(workTime / 60);
    if (breakInput) breakInput.value = Math.floor(breakTime / 60);
  }
}

function startTimer(duration, display, progressBar) {
  let remainingTime = duration;
  clearInterval(timerInterval);

  const updateDisplay = () => {
    const minutes = Math.floor(remainingTime / 60);
    const seconds = remainingTime % 60;
    display.textContent = `${minutes < 10 ? "0" + minutes : minutes}:${seconds < 10 ? "0" + seconds : seconds}`;

    const progress = ((duration - remainingTime) / duration) * 100;
    progressBar.style.width = `${progress}%`;
    
    // Save state every second
    saveTimerState(remainingTime, isWorking, true);
  };

  updateDisplay();
  timerInterval = setInterval(() => {
    if (remainingTime <= 0) {
      clearInterval(timerInterval);
      isWorking = !isWorking;
      remainingTime = isWorking ? workTime : breakTime;
      alert(isWorking ? "Time to work!" : "Time for a break!");
      startTimer(remainingTime, display, progressBar);
    } else {
      remainingTime--;
      updateDisplay();
    }
  }, 1000);
}

function resetTimer(display, progressBar) {
  clearInterval(timerInterval);
  isWorking = true;
  updateTimerDurationsFromInputs();
  
  const minutes = Math.floor(workTime / 60);
  const seconds = workTime % 60;
  display.textContent = `${minutes < 10 ? "0" + minutes : minutes}:${seconds < 10 ? "0" + seconds : seconds}`;
  progressBar.style.width = "0%";
  
  // Clear saved state
  localStorage.removeItem('pomodoroState');
  // Broadcast reset to other clients
  if (ws && ws.readyState === WebSocket.OPEN) {
    ws.send(JSON.stringify({ type: 'reset' }));
  }
}

// Handle visibility change
document.addEventListener('visibilitychange', () => {
  if (!document.hidden) {
    // Reload and sync state when tab becomes visible
    const state = loadTimerState();
    if (state) {
      syncTimerState(state);
    }
  }
});

// --------------------------
// INITIALIZATION
// --------------------------
document.addEventListener("DOMContentLoaded", () => {
  const display = document.querySelector("#time");
  const progressBar = document.querySelector("#progress");
  const startBtn = document.getElementById("startBtn");
  const resetBtn = document.getElementById("resetBtn");

  // Initialize WebSocket connection
  initializeWebSocket();
  
  // Load saved settings
  loadSettings();
  
  // Load and apply saved timer state
  const savedState = loadTimerState();
  if (savedState) {
    isWorking = savedState.isWorking;
    if (savedState.isActive && savedState.remainingTime > 0) {
      startTimer(savedState.remainingTime, display, progressBar);
    } else {
      const currentTime = isWorking ? workTime : breakTime;
      const minutes = Math.floor(currentTime / 60);
      const seconds = currentTime % 60;
      display.textContent = `${minutes < 10 ? "0" + minutes : minutes}:${seconds < 10 ? "0" + seconds : seconds}`;
    }
  } else {
    updateTimerDurationsFromInputs();
    const minutes = Math.floor(workTime / 60);
    const seconds = workTime % 60;
    if (display) {
      display.textContent = `${minutes < 10 ? "0" + minutes : minutes}:${seconds < 10 ? "0" + seconds : seconds}`;
    }
  }

  if (startBtn && display && progressBar) {
    startBtn.addEventListener("click", () => {
      updateTimerDurationsFromInputs();
      startTimer(workTime, display, progressBar);
    });
  }

  if (resetBtn && display && progressBar) {
    resetBtn.addEventListener("click", () => {
      resetTimer(display, progressBar);
    });
  }
});

async function loadTimeSlotsByDate(date) {
  const token = localStorage.getItem("access_token");
  try {
      const response = await fetch(`/api/time_slots/?date=${date}`, {
          headers: { 
              Authorization: `Bearer ${token}`,
              'Accept': 'application/json'
          }
      });
      
      if (response.ok) {
          const slots = await response.json();
          renderTimeSlotTable(slots); // Render the table with status
      } else {
          const error = await response.json();
          alert(`Failed to load time slots: ${error.detail || 'Unknown error'}`);
      }
  } catch (error) {
      console.error("Error loading time slots:", error);
      alert("Failed to load time slots. Please try again.");
  }
}

// Initialize date picker and load today's slots
document.addEventListener("DOMContentLoaded", () => {
  const today = new Date().toISOString().split('T')[0];
  const dateInput = document.getElementById("bookingDate");
  if (dateInput) {
      dateInput.value = today;
      loadTimeSlotsByDate(today);
      
      // Add event listener for date changes
      dateInput.addEventListener("change", (e) => {
          loadTimeSlotsByDate(e.target.value);
      });
  }
});

// Update digital clock
// check if the element exists
if (document.querySelector('.hours')) {
  function updateDigitalClock() {
      const now = new Date();
      const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const seconds = String(now.getSeconds()).padStart(2, '0');

    document.querySelector('.hours').textContent = hours;
    document.querySelector('.minutes').textContent = minutes;
    document.querySelector('.seconds').textContent = seconds;
  }

  // Update clock every second
  setInterval(updateDigitalClock, 1000);
  updateDigitalClock(); // Initial update

  // Minimize/Maximize functionality
  const minimizeBtn = document.querySelector('.minimize-btn');
  const timerSection = document.querySelector('.timer-section');

  minimizeBtn.addEventListener('click', () => {
    timerSection.style.display = timerSection.style.display === 'none' ? 'block' : 'none';
    minimizeBtn.innerHTML = timerSection.style.display === 'none' ? 
        '<i class="fas fa-plus"></i>' : '<i class="fas fa-minus"></i>';
  });
}




// for analytics



let completionTrendChart = null;
let timeDistributionChart = null;
let statusDistributionChart = null;

// Fetch overview analytics data
async function fetchOverviewAnalytics() {
  const token = localStorage.getItem("access_token");
  try {
    const response = await fetch("/analytics/overview", {
      headers: { Authorization: `Bearer ${token}` },
    });
    if (!response.ok) {
      throw new Error("Failed to fetch overview analytics data");
    }
    const data = await response.json();
    document.getElementById("totalSlots").textContent = data.total_slots;
    document.getElementById("completedSlots").textContent = data.completed_slots;
    document.getElementById("inProgressSlots").textContent = data.in_progress_slots;
    document.getElementById("notStartedSlots").textContent = data.not_started_slots;
    document.getElementById("totalMinutes").textContent = data.total_minutes_reported;
    document.getElementById("avgMinutes").textContent = Math.round(data.average_minutes_per_slot);
    document.getElementById("completionRate").textContent = `${data.completion_rate}%`;

    updateStatusDistributionChart(data);
  } catch (error) {
    console.error("Error fetching overview analytics:", error);
  }
}

// Fetch today's analytics data
async function fetchTodayAnalytics() {
  const token = localStorage.getItem("access_token");
  try {
    const response = await fetch("/analytics/today", {
      headers: { Authorization: `Bearer ${token}` },
    });
    if (!response.ok) {
      throw new Error("Failed to fetch today's analytics");
    }
    const data = await response.json();
    document.getElementById("todayTotalSlots").textContent = data.total_slots;
    document.getElementById("todayCompletedSlots").textContent = data.completed_slots;
    document.getElementById("todayTotalMinutes").textContent = data.total_minutes;
    document.getElementById("todayCompletionRate").textContent = `${data.completion_rate}%`;
  } catch (error) {
    console.error("Error fetching today's analytics:", error);
  }
}

// Update status distribution pie chart (Overview)
function updateStatusDistributionChart(data) {
  const ctx = document.getElementById("statusDistributionChart").getContext("2d");
  const chartData = {
    labels: ["Completed", "In Progress", "Not Started"],
    datasets: [
      {
        data: [data.completed_slots, data.in_progress_slots, data.not_started_slots],
        backgroundColor: [
          "rgba(34, 197, 94, 0.7)", // green
          "rgba(59, 130, 246, 0.7)", // blue
          "rgba(239, 68, 68, 0.7)"   // red
        ],
        borderColor: [
          "rgba(34, 197, 94, 1)",
          "rgba(59, 130, 246, 1)",
          "rgba(239, 68, 68, 1)"
        ],
        borderWidth: 1,
      },
    ],
  };

  if (statusDistributionChart) {
    statusDistributionChart.destroy();
  }
  statusDistributionChart = new Chart(ctx, {
    type: "pie",
    data: chartData,
    options: {
      responsive: true,
      plugins: {
        legend: { position: "top" },
        title: { display: true, text: "Slot Status Distribution" },
      },
    },
  });
}

// Fetch range analytics data and update additional analytics for the selected date range
async function fetchRangeAnalytics() {
  const startDate = document.getElementById("startDate").value;
  const endDate = document.getElementById("endDate").value;
  if (!startDate || !endDate) {
    alert("Please select both start and end dates");
    return;
  }
  const token = localStorage.getItem("access_token");
  try {
    const response = await fetch(
      `/analytics/range?start_date=${startDate}&end_date=${endDate}`,
      { headers: { Authorization: `Bearer ${token}` } }
    );
    if (!response.ok) {
      throw new Error("Failed to fetch range analytics data");
    }
    const data = await response.json();
    // Update range charts with daily analytics data
    updateCompletionTrendChart(data.daily_analytics);
    updateTimeDistributionChart(data.daily_analytics);
    updateRangeSummary(data.daily_analytics);
    updateRangeStatusChart(data.daily_analytics);
  } catch (error) {
    console.error("Error fetching range analytics:", error);
  }
}

// Update completion trend chart
function updateCompletionTrendChart(dailyData) {
  const labels = dailyData.map((day) => moment(day.date).format("MMM D"));
  const completionRates = dailyData.map((day) => day.completion_rate);
  if (completionTrendChart) {
    completionTrendChart.destroy();
  }
  completionTrendChart = new Chart(
    document.getElementById("completionTrendChart"),
    {
      type: "line",
      data: {
        labels: labels,
        datasets: [
          {
            label: "Completion Rate (%)",
            data: completionRates,
            borderColor: "rgb(59, 130, 246)",
            tension: 0.1,
            fill: true,
            backgroundColor: "rgba(59, 130, 246, 0.1)",
          },
        ],
      },
      options: {
        responsive: true,
        plugins: {
          legend: { position: "top" },
          title: { display: true, text: "Daily Completion Rate Trend" },
        },
        scales: {
          y: { beginAtZero: true, max: 100 },
        },
      },
    }
  );
}

// Update time distribution bar chart
function updateTimeDistributionChart(dailyData) {
  const labels = dailyData.map((day) => moment(day.date).format("MMM D"));
  const minutes = dailyData.map((day) => day.total_minutes);
  if (timeDistributionChart) {
    timeDistributionChart.destroy();
  }
  timeDistributionChart = new Chart(
    document.getElementById("timeDistributionChart"),
    {
      type: "bar",
      data: {
        labels: labels,
        datasets: [
          {
            label: "Total Minutes",
            data: minutes,
            backgroundColor: "rgba(59, 130, 246, 0.5)",
            borderColor: "rgb(59, 130, 246)",
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        plugins: {
          legend: { position: "top" },
          title: { display: true, text: "Daily Time Distribution" },
        },
        scales: {
          y: { beginAtZero: true },
        },
      },
    }
  );
}

// Update Range Analytics Summary cards
function updateRangeSummary(dailyData) {
  const totalSlots = dailyData.reduce((sum, day) => sum + (day.total_slots || 0), 0);
  const completedSlots = dailyData.reduce((sum, day) => sum + (day.completed_slots || 0), 0);
  const totalMinutes = dailyData.reduce((sum, day) => sum + (day.total_minutes || 0), 0);
  const avgCompletionRate = dailyData.length > 0
    ? dailyData.reduce((sum, day) => sum + (day.completion_rate || 0), 0) / dailyData.length
    : 0;

  document.getElementById("rangeTotalSlots").textContent = totalSlots;
  document.getElementById("rangeCompletedSlots").textContent = completedSlots;
  document.getElementById("rangeTotalMinutes").textContent = totalMinutes;
  document.getElementById("rangeAvgCompletionRate").textContent = `${Math.round(avgCompletionRate)}%`;
}

// Update range status distribution doughnut chart
function updateRangeStatusChart(dailyData) {
  const completedSlots = dailyData.reduce((sum, day) => sum + (day.completed_slots || 0), 0);
  const inProgressSlots = dailyData.reduce((sum, day) => sum + (day.in_progress_slots || 0), 0);
  const notStartedSlots = dailyData.reduce((sum, day) => sum + (day.not_started_slots || 0), 0);

  const ctx = document.getElementById("rangeStatusChart").getContext("2d");
  const chartData = {
    labels: ["Completed", "In Progress", "Not Started"],
    datasets: [
      {
        data: [completedSlots, inProgressSlots, notStartedSlots],
        backgroundColor: [
          "rgba(34, 197, 94, 0.7)",
          "rgba(59, 130, 246, 0.7)",
          "rgba(239, 68, 68, 0.7)"
        ],
        borderColor: [
          "rgba(34, 197, 94, 1)",
          "rgba(59, 130, 246, 1)",
          "rgba(239, 68, 68, 1)"
        ],
        borderWidth: 1,
      }
    ]
  };
  if (window.rangeStatusChart) {
    window.rangeStatusChart.destroy();
  }
  window.rangeStatusChart = new Chart(ctx, {
    type: "doughnut",
    data: chartData,
    options: {
      responsive: true,
      plugins: {
        legend: { position: "top" },
        title: { display: true, text: "Range Slot Status Distribution" }
      }
    }
  });
}

// Initialize page
document.addEventListener("DOMContentLoaded", () => {
  fetchOverviewAnalytics();
  fetchTodayAnalytics();
  
  // Set default date range to last 7 days
  const endDate = new Date();
  const startDate = new Date();
  startDate.setDate(startDate.getDate() - 7);
  document.getElementById("startDate").value = startDate.toISOString().split("T")[0];
  document.getElementById("endDate").value = endDate.toISOString().split("T")[0];
  fetchRangeAnalytics();
});



// verify email
// verify email
const sendOtpSection = document.getElementById('sendOtpSection');
const verifyOtpSection = document.getElementById('verifyOtpSection');
const sendOtpBtn = document.getElementById('sendOtpBtn');
const resendOtpBtn = document.getElementById('resendOtpBtn');
const verifyOtpForm = document.getElementById('verifyOtpForm');
const errorMessage = document.getElementById('errorMessage');

function showError(message) {
    errorMessage.textContent = message;
    errorMessage.classList.remove('d-none');
    setTimeout(() => {
        errorMessage.classList.add('d-none');
    }, 5000);
}

async function sendVerificationEmail() {
    this.classList.add('loading');

    try {
        const response = await fetch('/api/auth/send-verification?email=' + encodeURIComponent(email), {
            method: 'POST'
        });

        if (response.ok) {
            sendOtpSection.classList.add('d-none');
            verifyOtpSection.classList.remove('d-none');
        } else {
            const error = await response.json();
            if (response.status === 429) {
                showError('Too many attempts. Please try again in an hour.');
            } else {
                showError(error.detail || 'Failed to send verification email');
            }
        }
    } catch (error) {
        console.error('Error:', error);
        showError('Failed to send verification email');
    } finally {
        this.classList.remove('loading');
    }
}

sendOtpBtn.addEventListener('click', sendVerificationEmail);
resendOtpBtn.addEventListener('click', sendVerificationEmail);

verifyOtpForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const otp = document.getElementById('otp').value;

    e.target.querySelector('button[type="submit"]').classList.add('loading');

    const formData = new FormData();
    formData.append('email', email);
    formData.append('otp', otp);

    try {
        const response = await fetch('/api/auth/verify-otp', {
            method: 'POST',
            body: formData
        });

        if (response.ok) {
            const data = await response.json();
            localStorage.setItem('access_token', data.access_token);
            window.location.href = '/dashboard';
        } else {
            const error = await response.json();
            showError(error.detail || 'Invalid or expired verification code');
        }
    } catch (error) {
        console.error('Error:', error);
        showError('Failed to verify code');
    } finally {
        e.target.querySelector('button[type="submit"]').classList.remove('loading');
    }
});
\n\n./frontend/static/style.css:\n
/* ==========================================================================
   Global Resets & Variables
   ========================================================================== */
   *,
   *::before,
   *::after {
     margin: 0;
     padding: 0;
     box-sizing: border-box;
   }
   
   :root {
     /* Theme Colors */
     --primary-color: #4f46e5;
     --secondary-color: #10b981;
     --primary: var(--primary-color);
     --secondary: var(--secondary-color);
     
     --background: #f8fafc;
     --light-bg: #f9fafb;
     --card-bg: rgba(255, 255, 255, 0.9);
     --card: #ffffff;
     
     --text-color: #0f172a;
     --text-light: #64748b;
     --text-muted: #6b7280;
     
     /* Shadows & Borders */
     --shadow: 0 4px 24px -1px rgba(0, 0, 0, 0.1);
     --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1);
     --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
     --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
     --border: #e2e8f0;
     --border-color: #e2e8f0;
     
     /* Radii */
     --radius: 16px;
     --radius-sm: 8px;
     --radius-md: 12px;
     
     /* Status Colors */
     --success: #22c55e;
     --warning: #eab308;
     --danger: #ef4444;
     --background-gray: #f1f5f9;
   }
   
   /* ==========================================================================
      Base Styles & Utilities
      ========================================================================== */
   body {
     background: linear-gradient(135deg, var(--background) 0%, #e2e8f0 100%);
     min-height: 100vh;
     font-family: 'Inter', 'Plus Jakarta Sans', -apple-system, BlinkMacSystemFont, sans-serif;
     color: var(--text-color);
     line-height: 1.6;
     overflow-x: hidden;
   }
   
   /* Utility Classes */
   .container {
     max-width: 1400px;
     margin: 0 auto;
     padding: 2rem;
   }
   
   .grid {
     display: grid;
     gap: 1.5rem;
   }
   .grid-cols-1 { grid-template-columns: 1fr; }
   @media (min-width: 768px) {
     .md\:grid-cols-2 { grid-template-columns: repeat(2, 1fr); }
     .md\:grid-cols-3 { grid-template-columns: repeat(3, 1fr); }
     .md\:grid-cols-4 { grid-template-columns: repeat(4, 1fr); }
   }
   
   .flex { display: flex; }
   .items-center { align-items: center; }
   .justify-center { justify-content: center; }
   .gap-2 { gap: 0.5rem; }
   .gap-4 { gap: 1rem; }
   .flex-wrap { flex-wrap: wrap; }
   
   /* Spacing Utilities */
   .p-4 { padding: 1rem; }
   .px-4 { padding: 0 1rem; }
   .py-8 { padding: 2rem 0; }
   .mb-2 { margin-bottom: 0.5rem; }
   .mb-4 { margin-bottom: 1rem; }
   .mb-8 { margin-bottom: 2rem; }
   .mt-1 { margin-top: 0.25rem; }
   .mt-2 { margin-top: 0.5rem; }
   
   /* Animations */
   @keyframes fadeIn {
     from { opacity: 0; transform: translateY(10px); }
     to { opacity: 1; transform: translateY(0); }
   }
   .animate-in { animation: fadeIn 0.3s ease-out forwards; }
   
   @keyframes pulse {
     0% { transform: scale(1); opacity: 1; }
     50% { transform: scale(1.05); opacity: 0.8; }
     100% { transform: scale(1); opacity: 1; }
   }
   
   /* Custom Scrollbar */
   ::-webkit-scrollbar {
     width: 8px;
     height: 8px;
   }
   ::-webkit-scrollbar-track {
     background: rgba(0, 0, 0, 0.05);
     border-radius: 4px;
   }
   ::-webkit-scrollbar-thumb {
     background: rgba(99, 102, 241, 0.3);
     border-radius: 4px;
   }
   ::-webkit-scrollbar-thumb:hover {
     background: rgba(99, 102, 241, 0.5);
   }
   
   /* ==========================================================================
      Decorative Background Shapes
      ========================================================================== */
   .bg-shapes {
     position: fixed;
     top: 0;
     left: 0;
     width: 100%;
     height: 100%;
     z-index: -1;
   }
   .bg-shape {
     position: absolute;
     border-radius: 50%;
     filter: blur(80px);
     opacity: 0.3;
   }
   .shape-1 {
     width: 300px;
     height: 300px;
     background: rgba(99, 102, 241, 0.2);
     top: -100px;
     right: -100px;
   }
   .shape-2 {
     width: 400px;
     height: 400px;
     background: rgba(129, 140, 248, 0.2);
     bottom: -200px;
     left: -200px;
   }
   
   /* ==========================================================================
      Navbar
      ========================================================================== */
   .navbar {
     background: var(--card-bg);
     backdrop-filter: blur(10px);
     box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
     padding: 1rem 2rem;
   }
   .navbar-brand {
     font-weight: 800;
     font-size: 1.5rem;
     background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
     -webkit-background-clip: text;
     background-clip: text;
     color: transparent;
   }
   .nav-link {
     color: var(--text-light);
     font-weight: 500;
     padding: 0.5rem 1rem;
     margin: 0 0.25rem;
     border-radius: var(--radius);
     transition: all 0.2s ease;
   }
   .nav-link:hover {
     background: rgba(99, 102, 241, 0.1);
     color: var(--primary-color);
   }
   
   /* ==========================================================================
      Hero Section
      ========================================================================== */
   .hero-section {
     padding: 8rem 0;
     text-align: center;
     position: relative;
   }
   .hero-title {
     font-size: 3.5rem;
     font-weight: 800;
     margin-bottom: 1.5rem;
     background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
     -webkit-background-clip: text;
     background-clip: text;
     color: transparent;
   }
   .hero-subtitle {
     font-size: 1.25rem;
     color: var(--text-light);
     margin-bottom: 2.5rem;
     max-width: 600px;
     margin-left: auto;
     margin-right: auto;
   }
   
   /* For the Index Page (override hero styles if needed) */
   .hero-section.index-hero {
     padding: 5rem 1rem;
     background: linear-gradient(135deg, rgba(79,70,229,0.15) 0%, rgba(79,70,229,0.05) 100%);
     overflow: hidden;
   }
   .hero-section.index-hero .hero-title {
     font-size: 3rem;
     color: var(--primary-color);
   }
   .hero-section.index-hero .hero-subtitle {
     font-size: 1.2rem;
     color: var(--text-muted);
     margin-bottom: 2rem;
   }
   .hero-section.index-hero::before,
   .hero-section.index-hero::after {
     content: "";
     position: absolute;
     border-radius: 50%;
     background: var(--primary-color);
     opacity: 0.1;
   }
   .hero-section.index-hero::before {
     width: 250px;
     height: 250px;
     top: -100px;
     left: -100px;
   }
   .hero-section.index-hero::after {
     width: 250px;
     height: 250px;
     bottom: -100px;
     right: -100px;
   }
   
   /* ==========================================================================
      Cards
      ========================================================================== */
   .card,
   .bg-white {
     background: var(--card-bg);
     backdrop-filter: blur(10px);
     border: 1px solid rgba(255, 255, 255, 0.2);
     border-radius: var(--radius);
     box-shadow: var(--shadow);
     transition: transform 0.2s ease, box-shadow 0.2s ease;
   }
   .card:hover,
   .bg-white:hover {
     transform: translateY(-5px);
     box-shadow: 0 8px 32px -3px rgba(0, 0, 0, 0.15);
   }
   .card-header {
     background: transparent;
     border-bottom: 1px solid rgba(255, 255, 255, 0.1);
     border-top-left-radius: var(--radius);
     border-top-right-radius: var(--radius);
   }
   
   /* ==========================================================================
      Forms & Inputs
      ========================================================================== */
   .form-control {
     border-radius: var(--radius);
     border: 1px solid rgba(0, 0, 0, 0.1);
     padding: 0.75rem 1rem;
     background: var(--card-bg);
     transition: all 0.2s ease;
     font-family: inherit;
     color: var(--text-color);
   }
   .form-control:focus {
     outline: none;
     border-color: var(--primary-color);
     background: #fff;
     box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
   }
   
   /* ==========================================================================
      Buttons
      ========================================================================== */
   .btn {
     border-radius: var(--radius);
     padding: 0.75rem 1.5rem;
     font-weight: 600;
     transition: all 0.2s ease;
     cursor: pointer;
   }
   .btn-primary {
     background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
     border: none;
     box-shadow: 0 2px 12px -3px var(--primary-color);
     color: #fff;
   }
   .btn-primary:hover {
     transform: translateY(-2px);
     box-shadow: 0 4px 16px -3px var(--primary-color);
   }
   .btn-outline-primary {
     border: 2px solid var(--primary-color);
     color: var(--primary-color);
     background: transparent;
   }
   .btn-outline-primary:hover {
     background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
     border-color: transparent;
     color: #fff;
     transform: translateY(-2px);
   }
   .btn-light {
     background-color: #fff;
     border: 1px solid #e5e7eb;
     transition: all 0.2s ease;
   }
   .btn-light:hover {
     background-color: #f9fafb;
     border-color: #d1d5db;
     transform: translateY(-1px);
     box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
   }
   
   /* ==========================================================================
      Tables
      ========================================================================== */
      .table {
        background: rgba(255, 255, 255, 0.5);
        border-radius: var(--radius);
        overflow: hidden;
      }
      
      .table thead th {
        background: rgba(248, 250, 252, 0.8);
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.75rem;
        letter-spacing: 0.05em;
      }
      
      /* Custom scrollbar */
      ::-webkit-scrollbar {
        width: 8px;
        height: 8px;
      }
      
      ::-webkit-scrollbar-track {
        background: rgba(0, 0, 0, 0.05);
        border-radius: 4px;
      }
      
      ::-webkit-scrollbar-thumb {
        background: rgba(99, 102, 241, 0.3);
        border-radius: 4px;
      }
      
      ::-webkit-scrollbar-thumb:hover {
        background: rgba(99, 102, 241, 0.5);
      }
      
      /* Responsive adjustments */
      @media (max-width: 768px) {
        .hero-title {
          font-size: 2.5rem;
        }
      
        .hero-subtitle {
          font-size: 1.125rem;
        }
      
        .card {
          border-radius: 12px;
        }
      }
    
    /* General table styling */
    #timeSlotTable {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        border-radius: 8px;
        overflow: hidden;
        background-color: #fff;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
      }
      
      /* Table header */
      #timeSlotTable thead {
        background-color: #007bff;
        color: white;
        text-transform: uppercase;
      }
      
      #timeSlotTable th {
        padding: 12px;
        text-align: left;
        font-weight: 600;
      }
      
      /* Table rows */
      #timeSlotTable tbody tr {
        border-bottom: 1px solid #dee2e6;
        transition: background 0.3s;
      }
      
      #timeSlotTable tbody tr:hover {
        background-color: #f8f9fa;
      }
      
      /* Table cells */
      #timeSlotTable td {
        padding: 12px;
        vertical-align: middle;
      }
      
      /* Column-specific styling */
      #timeSlotTable td:nth-child(1) { /* Time */
        font-weight: bold;
        color: #343a40;
      }
      
      #timeSlotTable td:nth-child(2) { /* Done? */
        text-align: center;
      }
      
      #timeSlotTable td:nth-child(3) { /* To-Do List */
        font-style: italic;
      }
      
      #timeSlotTable td:nth-child(4) { /* Report */
        text-align: center;
        font-weight: 500;
        color: #6c757d;
      }
      
      #timeSlotTable td:nth-child(5) { /* Progress */
        text-align: center;
      }
      
      #timeSlotTable td:nth-child(6) { /* Rating */
        text-align: center;
        font-size: 1.2rem;
        font-weight: bold;
        color: #ffc107;
      }
      
      /* Checkbox and progress bar */
      #timeSlotTable input[type="checkbox"] {
        width: 18px;
        height: 18px;
      }
      
      @keyframes pulse {
        0% { transform: scale(1); opacity: 1; }
        50% { transform: scale(1.05); opacity: 0.8; }
        100% { transform: scale(1); opacity: 1; }
      }
      
      #timeDisplay.pulsing {
        animation: pulse 1s infinite;
      }
   
   /* ==========================================================================
      Timer & Pomodoro
      ========================================================================== */
   .floating-timer {
     position: fixed;
     bottom: 40px;
     right: 40px;
     background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
     border-radius: var(--radius);
     box-shadow: var(--shadow);
     padding: 1.5rem;
     width: 340px;
     z-index: 1000;
     color: var(--card-bg);
     backdrop-filter: blur(10px);
     border: 1px solid rgba(255, 255, 255, 0.1);
   }
   .digital-clock {
     text-align: center;
     font-size: 1rem;
     font-weight: bold;
     margin-bottom: 1.5rem;
     padding: 1rem;
     background: rgba(255, 255, 255, 0.08);
     border-radius: 12px;
     letter-spacing: 2px;
     border: 1px solid rgba(255, 255, 255, 0.3);
     text-shadow: 0 0 8px rgba(255, 255, 255, 0.6);
   }
   .digital-clock .colon {
     animation: blink 1s infinite;
     opacity: 0.8;
   }
   @keyframes blink {
     50% { opacity: 0.2; }
   }
   .timer-section {
     margin-bottom: 1.5rem;
   }
   .timer-section h2 {
     font-size: 1.3rem;
     margin-bottom: 1rem;
     text-align: center;
     font-weight: 700;
     color: #fff;
     text-shadow: 0 0 5px rgba(255, 255, 255, 0.6);
   }
   .timer-container {
     background: rgba(255, 255, 255, 0.1);
     border-radius: 12px;
     padding: 1.5rem;
     border: 1px solid rgba(255, 255, 255, 0.15);
   }
   .timer-settings {
     display: flex;
     gap: 1rem;
     margin-bottom: 1.5rem;
   }
   .time-input-group {
     flex: 1;
   }
   .time-input-group label {
     display: block;
     margin-bottom: 0.5rem;
     font-size: 0.875rem;
     color: rgba(255, 255, 255, 0.8);
   }
   .time-input-group input {
     width: 100%;
     padding: 0.75rem;
     border: 1px solid rgba(255, 255, 255, 0.3);
     border-radius: 10px;
     background: rgba(255, 255, 255, 0.1);
     color: #fff;
     font-size: 1rem;
     transition: all 0.2s ease;
     text-align: center;
   }
   .time-input-group input:focus {
     outline: none;
     border-color: rgba(255, 255, 255, 0.6);
     background: rgba(255, 255, 255, 0.2);
     box-shadow: 0 0 8px rgba(255, 255, 255, 0.4);
   }
   #time {
     font-size: 2.2rem;
     font-weight: 700;
     margin: 1.5rem 0;
     text-align: center;
     color: #fff;
     text-shadow: 0 0 12px rgba(0, 255, 150, 0.8);
     background: rgba(255, 255, 255, 0.08);
     padding: 1rem;
     border-radius: 12px;
     border: 1px solid rgba(255, 255, 255, 0.15);
   }
   .progress-container {
     background: rgba(255, 255, 255, 0.15);
     height: 8px;
     border-radius: 10px;
     margin: 1.5rem 0;
     overflow: hidden;
   }
   #progress {
     height: 100%;
     background: linear-gradient(90deg, rgba(0, 255, 150, 0.8), rgba(0, 255, 200, 1));
     border-radius: 10px;
     transition: width 0.8s ease-in-out;
     box-shadow: 0 0 12px rgba(0, 255, 150, 0.8);
   }
   .timer-controls {
     display: flex;
     gap: 1rem;
     justify-content: center;
     margin-top: 1.5rem;
   }
   .btn-timer {
     padding: 0.75rem 1.5rem;
     border: none;
     border-radius: 10px;
     cursor: pointer;
     transition: all 0.2s ease;
     font-weight: 700;
     font-size: 0.9rem;
     display: flex;
     align-items: center;
     gap: 0.5rem;
     text-transform: uppercase;
   }
   .btn-start {
     background: linear-gradient(135deg, #00ff96, #00ffc8);
     color: #fff;
     box-shadow: 0 4px 12px rgba(0, 255, 150, 0.6);
     padding: 8px 16px;
     font-size: 14px;
   }
   .btn-reset {
     background: rgba(255, 255, 255, 0.1);
     color: #fff;
     border: 1px solid rgba(255, 255, 255, 0.3);
     padding: 8px 16px;
     font-size: 14px;
   }
   .btn-timer:hover {
     transform: translateY(-2px);
     box-shadow: 0 6px 16px rgba(0, 0, 0, 0.3);
   }
   .minimize-btn {
     position: absolute;
     top: 1rem;
     right: 1rem;
     background: rgba(255, 255, 255, 0.1);
     border: 1px solid rgba(255, 255, 255, 0.3);
     border-radius: 50%;
     width: 32px;
     height: 32px;
     cursor: pointer;
     color: #fff;
     display: flex;
     align-items: center;
     justify-content: center;
     transition: all 0.2s ease;
   }
   .minimize-btn:hover {
     background: rgba(255, 255, 255, 0.2);
     transform: translateY(-2px);
   }
   
   /* ==========================================================================
      Task Section
      ========================================================================== */
   .task-section {
     background: var(--card-bg);
     backdrop-filter: blur(10px);
     border: 1px solid rgba(255, 255, 255, 0.2);
     border-radius: var(--radius);
     box-shadow: var(--shadow);
     padding: 2rem;
     margin: 2rem 0;
     transition: transform 0.2s ease, box-shadow 0.2s ease;
     position: relative;
     overflow: hidden;
     animation: fadeIn 0.5s ease-out forwards;
   }
   .task-section:hover {
     transform: translateY(-5px);
     box-shadow: 0 8px 32px -3px rgba(0, 0, 0, 0.15);
   }
   .task-section::before {
     content: '';
     position: absolute;
     top: 0;
     left: 0;
     right: 0;
     bottom: 0;
     background: rgba(255, 255, 255, 0.1);
     backdrop-filter: blur(10px);
     z-index: -1;
     border-radius: var(--radius);
   }
   .task-header {
     display: flex;
     justify-content: space-between;
     align-items: center;
     padding-bottom: 1.5rem;
     border-bottom: 1px solid rgba(255, 255, 255, 0.1);
     margin-bottom: 2rem;
   }
   .task-header h2 {
     font-size: 1.5rem;
     background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
     -webkit-background-clip: text;
     background-clip: text;
     color: transparent;
     display: flex;
     align-items: center;
     gap: 0.75rem;
     margin: 0;
   }
   .task-header h2 i {
     color: var(--primary-color);
     font-size: 1.25rem;
   }
   .task-header .d-flex {
     display: flex;
     align-items: center;
     gap: 0.75rem;
   }
   .task-header label {
     color: var(--text-light);
     font-weight: 500;
     margin: 0;
   }
   .date-picker {
     border-radius: var(--radius);
     border: 1px solid rgba(0, 0, 0, 0.1);
     padding: 0.75rem 1rem;
     background: var(--card-bg);
     transition: all 0.2s ease;
     font-family: inherit;
     color: var(--text-color);
     min-width: 160px;
   }
   .date-picker:focus {
     outline: none;
     box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
     border-color: var(--primary-color);
     background: #fff;
   }
   .date-picker:hover {
     border-color: var(--primary-color);
   }
   .date-picker::-webkit-calendar-picker-indicator {
     cursor: pointer;
     opacity: 0.6;
     transition: opacity 0.2s ease;
   }
   .date-picker::-webkit-calendar-picker-indicator:hover {
     opacity: 1;
   }
   
   /* Task Section Decorative Shapes */
   .task-section .bg-shape {
     position: absolute;
     border-radius: 50%;
     filter: blur(80px);
     opacity: 0.1;
     z-index: -1;
   }
   .task-section .shape-1 {
     width: 200px;
     height: 200px;
     background: var(--primary-color);
     top: -100px;
     right: -100px;
   }
   .task-section .shape-2 {
     width: 300px;
     height: 300px;
     background: var(--secondary-color);
     bottom: -150px;
     left: -150px;
   }
   
   /* ==========================================================================
      Status Dropdown
      ========================================================================== */
   .statusSelect {
     appearance: none;
     -webkit-appearance: none;
     -moz-appearance: none;
     padding: 6px 12px;
     border: none;
     border-radius: 4px;
     font-size: 14px;
     font-weight: 500;
     cursor: pointer;
     outline: none;
     background-color: #e9ecef;
     color: #495057;
     transition: background-color 0.3s ease, color 0.3s ease;
     background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23495057'><path d='M7 10l5 5 5-5z'/></svg>");
     background-repeat: no-repeat;
     background-position: right 8px center;
     background-size: 12px;
     padding-right: 30px;
   }
   .statusSelect:focus {
     box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
   }
   .statusSelect option {
     font-size: 14px;
     font-weight: 500;
   }
   .statusSelect option[value="completed"] {
     background-color: #28a745;
     color: #fff;
   }
   .statusSelect option[value="in_progress"] {
     background-color: #ffc107;
     color: #000;
   }
   .statusSelect option[value="not_started"] {
     background-color: #dc3545;
     color: #fff;
   }
   .statusSelect option:hover,
   .statusSelect option:checked {
     background-color: #007bff;
     color: #fff;
   }
/* ==========================================================================
   Analytics Dashboard Styles
   ========================================================================== */

/* ----- Global Variables & Resets ----- */
:root {
  --primary-color: #4f46e5;
  --secondary-color: #10b981;
  --background: #f8fafc;
  --card-bg: #ffffff;
  --text-color: #0f172a;
  --gray: #718096;
  --green: #22c55e;
  --shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  --radius: 8px;
  --font-family: 'Plus Jakarta Sans', sans-serif;
}

*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: var(--font-family);
  background-color: var(--background);
  color: var(--text-color);
  line-height: 1.6;
}

/* ----- Layout & Utility Classes ----- */
.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 1rem;
}

.flex {
  display: flex;
}
.items-center {
  align-items: center;
}
.justify-between {
  justify-content: space-between;
}
.mx-auto {
  margin-left: auto;
  margin-right: auto;
}

/* Spacing */
.mb-4 {
  margin-bottom: 1rem;
}
.mb-8 {
  margin-bottom: 2rem;
}
.p-4 {
  padding: 1rem;
}
.px-4 {
  padding-left: 1rem;
  padding-right: 1rem;
}

/* Grid utilities */
.grid {
  display: grid;
  gap: 1rem;
}
.grid-cols-1 {
  grid-template-columns: 1fr;
}
@media (min-width: 768px) {
  .md\:grid-cols-2 {
    grid-template-columns: repeat(2, 1fr);
  }
  .md\:grid-cols-3 {
    grid-template-columns: repeat(3, 1fr);
  }
  .md\:grid-cols-4 {
    grid-template-columns: repeat(4, 1fr);
  }
}
.gap-4 {
  gap: 1rem;
}

/* ----- Header ----- */
header {
  background-color: var(--card-bg);
  box-shadow: var(--shadow);
  padding: 1rem 2rem;
}

.logo-title {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.navbar-logo {
  width: 40px;
  height: auto;
}

header h1 {
  font-size: 1.5rem;
  font-weight: bold;
}

/* ----- Back Button ----- */
.back-button {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  background-color: var(--background);
  color: var(--primary-color);
  padding: 0.5rem 1rem;
  border: 1px solid var(--primary-color);
  border-radius: var(--radius);
  text-decoration: none;
  font-weight: 500;
  transition: background-color 0.2s ease, color 0.2s ease;
}

.back-button:hover {
  background-color: var(--primary-color);
  color: #fff;
}

/* ----- Headings ----- */
h2 {
  font-size: 1.75rem;
  font-weight: bold;
  margin-bottom: 1rem;
}

h3 {
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
}

/* ----- Card Styles ----- */
.bg-white {
  background-color: var(--card-bg);
  padding: 1rem;
  border-radius: var(--radius);
  box-shadow: var(--shadow);
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.bg-white:hover {
  transform: translateY(-4px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

/* ----- Text Utilities ----- */
.text-2xl {
  font-size: 2rem;
  font-weight: bold;
}

.text-lg {
  font-size: 1.25rem;
  font-weight: 600;
}

.text-gray-600 {
  color: var(--gray);
}

.text-green-600 {
  color: var(--green);
}

/* ----- Form Controls ----- */
input[type="date"] {
  padding: 0.5rem;
  border: 1px solid #ccc;
  border-radius: var(--radius);
  font-size: 1rem;
}

input[type="date"]:focus {
  outline: none;
  border-color: var(--primary-color);
  box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.2);
}

/* ----- Button Styles ----- */
.btn-primary {
  background-color: var(--primary-color);
  color: #fff;
  padding: 0.5rem 1rem;
  border: none;
  border-radius: var(--radius);
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.btn-primary:hover {
  background-color: var(--secondary-color);
}

/* ----- Chart Elements ----- */
canvas {
  width: 100%;
  height: auto;
}

/* ==========================================================================
   Specific Analytics Page Components
   ========================================================================== */

/* Overview Cards (Time Slots, Time Tracking, Completion Rate) */
.overview .card-content {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 0.75rem;
}
.overview .card-content p {
  margin: 0.25rem 0;
}

/* Today's Analytics Grid */
.today-analytics .grid {
  grid-template-columns: 1fr;
}
@media (min-width: 768px) {
  .today-analytics .grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

/* Time Range Analysis Form */
.time-range label {
  font-size: 0.875rem;
  color: var(--gray);
  margin-bottom: 0.25rem;
  display: block;
}

/* Charts Section Headings */
.chart-section h3 {
  margin-bottom: 1rem;
}

/* ==========================================================================
   End of Analytics Styles
   ========================================================================== */

   
   /* Feature Cards & Footer (Index Page) */
   .feature-card {
     background: #fff;
     border-radius: 12px;
     padding: 2rem;
     box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
     transition: transform 0.3s ease;
     text-align: center;
   }
   .feature-card:hover {
     transform: translateY(-5px);
   }
   .feature-card i {
     font-size: 3rem;
     margin-bottom: 1rem;
     color: var(--primary-color);
   }
   .feature-card h3 {
     color: var(--primary-color);
     margin-bottom: 0.5rem;
   }
   .feature-card p {
     color: var(--text-muted);
   }
   .footer {
     text-align: center;
     padding: 2rem 0;
     background: #fff;
     color: var(--text-muted);
     font-size: 0.875rem;
     box-shadow: 0 -2px 6px rgba(0, 0, 0, 0.1);
     margin-top: 3rem;
   }
   
   /* Login & Register Pages */

   .login-card,
   .register-card {
     background: #fff;
     border-radius: 12px;
     padding: 2rem;
     box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
   }
   .login-card h2,
   .register-card h2 {
     color: #333;
     font-weight: 700;
     margin-bottom: 1.5rem;
   }
   .form-control {
     border-radius: 8px;
     padding: 10px;
     font-size: 1rem;
     transition: all 0.3s ease-in-out;
   }
   .form-control:focus {
     border-color: var(--primary-color);
     box-shadow: 0 0 8px rgba(79, 70, 229, 0.3);
   }
   .btn-primary {
     background-color: var(--primary-color);
     border: none;
     padding: 0.75rem;
     font-size: 1rem;
     border-radius: 8px;
     transition: all 0.3s ease-in-out;
   }
   .btn-primary:hover {
     background-color: #4338ca;
   }
   .register-link,
   .login-link {
     color: var(--primary-color);
     font-weight: 500;
     text-decoration: none;
     transition: color 0.3s;
   }
   .register-link:hover,
   .login-link:hover {
     color: #4338ca;
   }
   
   /* ==========================================================================
      Verify Email Loader
      ========================================================================== */
   .loader {
     border: 5px solid #f3f3f3;
     border-top: 5px solid #3498db;
     border-radius: 50%;
     width: 20px;
     height: 20px;
     animation: spin 1s linear infinite;
     display: none;
     margin: 0 auto;
   }
   @keyframes spin {
     0% { transform: rotate(0deg); }
     100% { transform: rotate(360deg); }
   }
   .loading .fa-paper-plane,
   .loading .fa-redo,
   .loading .fa-check-circle {
     display: none;
   }
   .loading .loader {
     display: block;
   }
   .loading {
     cursor: wait;
     pointer-events: none;
   }
   
   /* ==========================================================================
      Call Back Page
      ========================================================================== */
   .loading-container {
     display: flex;
     flex-direction: column;
     align-items: center;
     justify-content: center;
     min-height: 100vh;
     background-color: var(--light-bg);
   }
   .spinner {
     width: 50px;
     height: 50px;
     margin-bottom: 1rem;
   }
   


/* leaderboard */


/* Leaderboard Section */
.leaderboard {
  padding: 2rem 0;
  background: linear-gradient(135deg, #f8f9fa, #e9ecef);
  border-top: 1px solid #dee2e6;
  border-bottom: 1px solid #dee2e6;
}

.leaderboard h2 {
  font-family: 'Poppins', sans-serif;
  font-weight: 700;
  color: #343a40;
  margin-bottom: 1rem;
}

.leaderboard .leaderboard-card {
  border: none;
  border-radius: 0.75rem;
  overflow: hidden;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  background: #ffffff;
}

.leaderboard .leaderboard-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.12);
}

.leaderboard .card-header {
  background: #007bff;
  color: #fff;
  font-size: 1.1rem;
  padding: 0.75rem 1rem;
  border-bottom: none;
}

.leaderboard .leaderboard-list .list-group-item {
  background: #fff;
  border: none;
  padding: 0.75rem 1rem;
  font-family: 'Roboto', sans-serif;
  font-size: 0.95rem;
  transition: background 0.2s ease;
  border-top: 1px solid #f1f3f5;
}

.leaderboard .leaderboard-list .list-group-item:first-child {
  border-top: 1px solid #007bff;
}

.leaderboard .leaderboard-list .list-group-item:hover {
  background: #f1f1f1;
}

/* Responsive Spacing */
@media (max-width: 768px) {
  .leaderboard {
    padding: 1.5rem 0;
  }
  .leaderboard h2 {
    font-size: 1.5rem;
  }
}


/* Navbar Styling */
.navbar {
  padding: 1rem 2rem;
  background: rgba(255, 255, 255, 0.95);
  box-shadow: 0 2px 15px rgba(0, 0, 0, 0.05);
  transition: all 0.3s ease;
}

.navbar-brand {
  font-size: 1.5rem;
  font-weight: 600;
  transition: color 0.3s ease;
}

.navbar-brand:hover {
  color: #0d6efd;
}

/* Leaderboard Section */
.leaderboard {
  padding: 6rem 0 3rem 0;
  background: #f8f9fa;
}

.leaderboard .card {
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  border: none;
  border-radius: 12px;
  overflow: hidden;
}

.leaderboard .card:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
}

.leaderboard .card-header {
  background: #0d6efd;
  color: white;
  padding: 1rem;
  font-size: 1.1rem;
}

.leaderboard .list-group-item {
  padding: 1rem 1.5rem;
  border-left: none;
  border-right: none;
  transition: background-color 0.3s ease;
}

.leaderboard .list-group-item:hover {
  background-color: #f8f9fa;
}

/* Hero Section */
.hero-section {
  padding: 8rem 0;
  background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
  margin-top: -2rem;
}

.hero-title {
  font-size: 3.5rem;
  font-weight: 700;
  margin-bottom: 1.5rem;
  color: #212529;
}

.hero-subtitle {
  font-size: 1.25rem;
  color: #6c757d;
  margin-bottom: 2.5rem;
  max-width: 800px;
  margin-left: auto;
  margin-right: auto;
}

/* Features Section */
.feature-card {
  padding: 2.5rem;
  text-align: center;
  background: white;
  border-radius: 12px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.feature-card:hover {
  transform: translateY(-10px);
  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
}

.feature-card i {
  font-size: 2.5rem;
  color: #0d6efd;
  margin-bottom: 1.5rem;
}

.feature-card h3 {
  font-size: 1.5rem;
  margin-bottom: 1rem;
  color: #212529;
}

.feature-card p {
  color: #6c757d;
  line-height: 1.6;
}

/* Buttons */
.btn {
  padding: 0.75rem 1.5rem;
  font-weight: 500;
  transition: all 0.3s ease;
}

.btn-primary {
  box-shadow: 0 4px 15px rgba(13, 110, 253, 0.2);
}

.btn-primary:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 20px rgba(13, 110, 253, 0.3);
}

.btn-outline-primary:hover {
  transform: translateY(-2px);
}

/* Footer */
.footer {
  background: #212529;
  color: #fff;
  padding: 2rem 0;
  margin-top: 4rem;
}\n\n./frontend/static/time-slot-manager.js:\n
async function fetchTopUsers(timeframe, elementId) {
    try {
        const response = await fetch(`analytics/top-users/${timeframe}`);
        const data = await response.json();
        
        const listElement = document.getElementById(elementId);
        listElement.innerHTML = ""; // Clear previous entries

        if (data.error) {
            listElement.innerHTML = `<li class="list-group-item text-danger">${data.error}</li>`;
            return;
        }

        data.forEach(user => {
            const listItem = document.createElement("li");
            listItem.classList.add("list-group-item");
            listItem.innerHTML = `<strong>${user.username}</strong>: ${user.total_time} minutes`;
            listElement.appendChild(listItem);
        });

    } catch (error) {
        console.error("Error fetching top users:", error);
    }
}

// Load the leaderboard data on page load
document.addEventListener("DOMContentLoaded", function() {
    fetchTopUsers("daily", "top-users-daily");
    fetchTopUsers("weekly", "top-users-weekly");
    fetchTopUsers("monthly", "top-users-monthly");
});
\n\n./frontend/templates/callback.html:\n
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="static/style.css">
    
</head>
<body>
    <div class="loading-container">
        <div class="spinner-border text-primary spinner" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="h4 mb-3">Authenticating...</p>
        <p class="text-muted">Please wait while we complete the process.</p>
    </div>

    <div id="auth-data" 
         data-token="{{ access_token }}" 
         data-type="{{ token_type }}" 
         data-error="{{ detail if detail is defined else '' }}">
    </div>

    <script>
        const authData = document.getElementById('auth-data');
        const token = authData.dataset.token;
        const error = authData.dataset.error;
        
        setTimeout(() => {
            if (token) {
                localStorage.setItem('access_token', token);
                window.location.href = '/dashboard';
            } else {
                window.location.href = '/login?error=' + encodeURIComponent(error || 'Authentication failed');
            }
        }, 1500); // Add a small delay for better UX
    </script>
</body>
</html> \n\n./frontend/templates/index.html:\n
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Productivity Planner</title>

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <!-- Custom CSS -->
  <link rel="stylesheet" href="static/style.css">

  <style>
    .content-wrapper {
      display: none;
    }
    
    .loading-spinner {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }

    .auth-buttons, .user-menu {
      display: none;
    }
  </style>

  <!-- Authentication Scripts -->
  <script>
    function isAuthenticated() {
        return !!localStorage.getItem("access_token"); // Returns true if token exists
    }

    function handleLogout() {
        localStorage.removeItem("access_token");
        window.location.href = "/login";
    }

    // New function to handle Get Started button click
    async function handleGetStarted(event) {
        event.preventDefault();
        const token = localStorage.getItem("access_token");
        
        if (!token) {
            window.location.href = '/login';
            return;
        }
        else {
          window.location.href = '/dashboard';
        }
    }

    async function updateNavigation() {
        const token = localStorage.getItem("access_token");
        const authButtons = document.getElementById('auth-buttons');
        const userMenu = document.getElementById('user-menu');
        
        if (token) {
            authButtons.style.display = 'none';
            userMenu.style.display = 'block';
            
            try {
                const response = await isAuthenticated();
                if (response && response.ok) {
                    const userData = await response.json();
                    document.getElementById('username').textContent = userData.name || 'User';
                }
            } catch (error) {
                console.error('Error fetching user info:', error);
            }
        } else {
            authButtons.style.display = 'block';
            userMenu.style.display = 'none';
        }
    }

    async function checkAuth() {
        try {
            const token = localStorage.getItem("access_token");
            if (token) {
                const response = await isAuthenticated();
                if (response && response.ok) {
                    await updateNavigation();
                    window.location.href = '/dashboard';
                    return;
                }
            }
            await updateNavigation();
            document.getElementById('loading-spinner').style.display = 'none';
            document.getElementById('content-wrapper').style.display = 'block';
        } catch (error) {
            await updateNavigation();
            document.getElementById('loading-spinner').style.display = 'none';
            document.getElementById('content-wrapper').style.display = 'block';
        }
    }

    // Initialize all event listeners when page loads
    document.addEventListener('DOMContentLoaded', () => {
        checkAuth();
        
        // Add event listener to Get Started button
        const getStartedBtn = document.getElementById('getStartedBtn');
        if (getStartedBtn) {
            getStartedBtn.addEventListener('click', handleGetStarted);
        }
    });
  </script>
</head>
<body>
  <!-- Loading Spinner -->
  <div id="loading-spinner" class="loading-spinner">
    <div class="spinner-border text-primary" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
  </div>

  <!-- Main Content Wrapper -->
  <div id="content-wrapper" class="content-wrapper">
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-light fixed-top">
      <div class="container-fluid">
        <a class="navbar-brand" href="/">
          <i class="fas fa-chart-line me-2"></i>Productivity Planner
        </a>
        <!-- Auth Buttons (shown when logged out) -->
        <div id="auth-buttons" class="ms-auto auth-buttons">
          <a href="/login" class="btn btn-outline-primary btn-sm">
            <i class="fas fa-sign-in-alt me-1"></i>Log In
          </a>
          <a href="/register" class="btn btn-primary btn-sm ms-2">
            <i class="fas fa-user-plus me-1"></i>Sign Up
          </a>
        </div>
        <!-- User Menu (shown when logged in) -->
        <div id="user-menu" class="ms-auto user-menu">
          <div class="dropdown">
            <button class="btn btn-outline-primary btn-sm dropdown-toggle" type="button" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
              <i class="fas fa-user me-1"></i>
              <span id="username">User</span>
            </button>
            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
              <li><a class="dropdown-item" href="/dashboard">
                <i class="fas fa-tachometer-alt me-2"></i>Dashboard
              </a></li>
              <li><a class="dropdown-item" href="#">
                <i class="fas fa-user-cog me-2"></i>Profile
              </a></li>
              <li><hr class="dropdown-divider"></li>
              <li><a class="dropdown-item" href="#" onclick="handleLogout()">
                <i class="fas fa-sign-out-alt me-2"></i>Logout
              </a></li>
            </ul>
          </div>
        </div>
      </div>
    </nav>

    <section class="leaderboard mt-4">
      <div class="container">
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h2 class="mb-0">🏆 Top Users</h2>
          <button
            class="btn btn-outline-secondary"
            type="button"
            data-bs-toggle="collapse"
            data-bs-target="#leaderboardContent"
            aria-expanded="true"
            aria-controls="leaderboardContent"
            id="toggleLeaderboard"
          >
            Hide
          </button>
        </div>
        <div class="collapse show" id="leaderboardContent">
          <div class="row">
            <div class="col-md-4 mb-3">
              <div class="card shadow-sm">
                <div class="card-header text-center fw-bold">Daily</div>
                <ul id="top-users-daily" class="list-group list-group-flush"></ul>
              </div>
            </div>
            <div class="col-md-4 mb-3">
              <div class="card shadow-sm">
                <div class="card-header text-center fw-bold">Weekly</div>
                <ul id="top-users-weekly" class="list-group list-group-flush"></ul>
              </div>
            </div>
            <div class="col-md-4 mb-3">
              <div class="card shadow-sm">
                <div class="card-header text-center fw-bold">Monthly</div>
                <ul id="top-users-monthly" class="list-group list-group-flush"></ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
    
    <!-- Optional JavaScript to update button text based on collapse state -->
    <script>
      document.addEventListener("DOMContentLoaded", function() {
        const leaderboardCollapse = document.getElementById("leaderboardContent");
        const toggleButton = document.getElementById("toggleLeaderboard");
    
        leaderboardCollapse.addEventListener("hidden.bs.collapse", function () {
          toggleButton.textContent = "Show";
        });
    
        leaderboardCollapse.addEventListener("shown.bs.collapse", function () {
          toggleButton.textContent = "Hide";
        });
      });
    </script>
    


    <!-- Hero Section -->
    <section class="hero-section">
      <div class="container">
        <h1 class="hero-title">Master Your Time</h1>
        <p class="hero-subtitle">
          Transform your productivity with our intelligent planning tools.
          Stay organized, focused, and achieve more every day.
        </p>
        <div class="d-flex justify-content-center gap-3">
          <a href="/dashboard" class="btn btn-primary" id="getStartedBtn">
            <i class="fas fa-rocket me-2"></i>Get Started
          </a>
          <a href="#" class="btn btn-outline-primary">
            <i class="fas fa-lightbulb me-2"></i>Explore Features
          </a>
        </div>
      </div>
    </section>
    

    <!-- Features Section -->
    <section class="py-5">
      <div class="container">
        <div class="row g-4">
          <div class="col-md-4">
            <div class="feature-card">
              <i class="fas fa-stopwatch"></i>
              <h3>Smart Time Tracking</h3>
              <p>Monitor daily activities and gain insights into your productivity trends.</p>
            </div>
          </div>
          <div class="col-md-4">
            <div class="feature-card">
              <i class="fas fa-hourglass-start"></i>
              <h3>Focus Timer</h3>
              <p>Use the Pomodoro technique to stay focused and maximize efficiency.</p>
            </div>
          </div>
          <div class="col-md-4">
            <div class="feature-card">
              <i class="fas fa-chart-line"></i>
              <h3>Analytics Dashboard</h3>
              <p>Visualize your progress and optimize your workflow with detailed analytics.</p>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Footer -->
    <footer class="footer">
      <div class="container">
        <p>&copy; 2025 Productivity Planner. All rights reserved.</p>
      </div>
    </footer>
  </div>

  <!-- Bootstrap Bundle JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="static/time-slot-manager.js"></script>

</body>
</html>\n\n./frontend/templates/register.html:\n
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Register | Productivity Planner</title>

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="static/style.css">


</head>
<body>

  <!-- Register Form -->
  <main class="container">
    <div class="row justify-content-center align-items-center" style="min-height: 90vh;">
      <div class="col-md-5">
        <div class="register-card">
          <div class="card-body">
            <div class="text-center"> 
              <img src="/static/img/planner_logo_100x100.png" alt="Planner Logo" class="auth-logo mb-4" style="max-width: 50px;">
              <h3 class="text-center">Create an Account</h3>
            </div>
            <!-- Google OAuth Button -->
            <a href="/api/auth/login/google" class="btn btn-light w-100 mb-4 d-flex align-items-center justify-content-center">
              <img src="https://www.google.com/favicon.ico" alt="Google" class="me-2" style="width: 18px;">
              Continue with Google
            </a>

            <div class="divider text-center mb-3">
              <span class="bg-white px-3 py-2 rounded-pill text-muted">OR</span>
            </div>

            <form id="registerForm">
              <div class="mb-4">
                <label for="email" class="form-label">Email Address</label>
                <input type="email" class="form-control" id="email" name="email" placeholder="Enter your email" required />
              </div>
              <div class="mb-4">
                <label for="username" class="form-label">Username</label>
                <input type="text" class="form-control" id="username" name="username" 
                       placeholder="Choose a username" 
                       pattern="^[a-zA-Z0-9_-]+$"
                       minlength="3"
                       maxlength="50"
                       required />
                <div class="form-text">
                  Username must be 3-50 characters long and can only contain letters, numbers, underscores, and hyphens.
                </div>
              </div>
              <div class="mb-4">
                <label for="password" class="form-label">Password</label>
                <input type="password" class="form-control" id="password" name="password" placeholder="Create a password" required />
                <div class="password-requirements">
                  Password must be at least <strong>8 characters</strong> long and include <strong>numbers & special characters</strong>.
                </div>
              </div>
              <button type="submit" class="btn btn-primary w-100 mb-3">Create Account</button>
            </form>
            <p class="text-center mb-0">
              Already have an account? <a href="/login" class="login-link">Login here</a>
            </p>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Bootstrap Bundle JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="/static/script.js"></script>

</body>
</html>
\n\n./frontend/templates/login.html:\n
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Login | Productivity Planner</title>

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="static/style.css">

</head>
<body>

  <!-- Login Form -->
  <main class="container">
    <div class="row justify-content-center align-items-center" style="min-height: 80vh;">
      <div class="col-md-5">
        <div class="card shadow-lg">  
          <div class="card-body p-5">
            <div class="text-center">
              <img src="/static/img/planner_logo_100x100.png" alt="Planner Logo" class="auth-logo mb-4" style="max-width: 50px;">
              <h3 class="mb-4">Sign in to Planner</h3>
            </div>
            
            <!-- Google OAuth Button -->
            <a href="/api/auth/login/google" class="btn btn-light w-100 mb-4 d-flex align-items-center justify-content-center">
              <img src="https://www.google.com/favicon.ico" alt="Google" class="me-2" style="width: 18px;">
              Continue with Google
            </a>
            
            <div class="divider text-center mb-3">
              <span class="bg-white px-3 py-2 rounded-pill text-muted">OR</span>
            </div>

            <form id="loginForm" class="text-start">
              <div class="mb-3">
                <input type="email" class="form-control" id="email" name="email" placeholder="Email address" required>
              </div>
              <div class="mb-4">
                <input type="password" class="form-control" id="password" name="password" placeholder="Password" required>
              </div>
              <button type="submit" class="btn btn-primary w-100 mb-3">
                <i class="fas fa-sign-in-alt me-2"></i>Sign in
              </button>
            </form>
            <p class="mb-0 text-muted">
              Don't have an account? <a href="/register" class="text-decoration-none">Register</a>
            </p>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Bootstrap Bundle JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="/static/script.js"></script>

</body>
</html>
\n\n./frontend/templates/dashboard.html:\n
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Dashboard | Productivity Planner</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="static/style.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light fixed-top">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">
                <img src="/static/img/planner_logo_100x100.png" alt="Planner Logo" class="navbar-logo" style="max-width: 35px;;">
                Planner Dashboard
            </a>
            <div class="ms-auto">
                <div class="dropdown">
                    <button class="btn btn-outline-primary btn-sm dropdown-toggle" type="button" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="fas fa-user me-1"></i>
                        <span id="username">User</span>
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                        <li><a class="dropdown-item" href="#">
                            <i class="fas fa-user-cog me-2"></i>Profile Settings
                        </a></li>
                        <li><a class="dropdown-item" href="#">
                            <i class="fas fa-bell me-2"></i>Notifications
                        </a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item text-danger" href="#" id="logoutBtn">
                            <i class="fas fa-sign-out-alt me-2"></i>Logout
                        </a></li>
                    </ul>
                </div>
            </div>
        </div>
    </nav>

    <main class="container" style="margin-top: 6rem;">
        <!-- Timer Section -->
        <div class="floating-timer">
          <button class="minimize-btn">
              <i class="fas fa-minus"></i>
          </button>
          
          <!-- Digital Clock -->
          <div class="digital-clock">
              <span class="hours">00</span>
              <span class="colon">:</span>
              <span class="minutes">00</span>
              <span class="colon">:</span>
              <span class="seconds">00</span>
          </div>
  
          <!-- Timer Section -->
          <section class="timer-section">
              <h2>
                  <i class="fas fa-clock me-2"></i>Pomodoro Timer
              </h2>
              <div class="timer-container">
                  <div class="timer-settings">
                      <div class="time-input-group">
                          <label for="workTime">Work Duration (min)</label>
                          <input type="number" id="workTime" value="25" min="1">
                      </div>
                      <div class="time-input-group">
                          <label for="breakTime">Break Duration (min)</label>
                          <input type="number" id="breakTime" value="5" min="1">
                      </div>
                  </div>
                  <div class="timer-display">
                      <h2>Current Session</h2>
                      <div id="time">25:00</div>
                      <div class="progress-container">
                          <div id="progress" class="progress" style="width: 0%"></div>
                      </div>
                      <div class="timer-controls">
                          <button class="btn-timer btn-start" id="startBtn">
                              <i class="fas fa-play"></i>Start
                          </button>
                          <button class="btn-timer btn-reset" id="resetBtn">
                              <i class="fas fa-redo"></i>Reset
                          </button>
                      </div>
                  </div>
              </div>
          </section>
      </div>

        <!-- Task Management Section -->
        <section class="task-section">
            <div class="task-header">
                <h2 class="fw-bold mb-0">
                    <i class="fas fa-tasks me-2"></i>Time Slots
                </h2>
                <div class="d-flex align-items-center">
                    <label for="bookingDate" class="me-2 mb-0">Date:</label>
                    <input type="date" id="bookingDate" class="date-picker">
                </div>
            </div>

            <form id="timeSlotForm" class="task-form">
                <div class="row g-3">
                    <div class="col-md-3">
                        <label for="startTime" class="form-label">Start Time</label>
                        <input type="time" id="startTime" class="form-control" required>
                    </div>
                    <div class="col-md-3">
                        <label for="endTime" class="form-label">End Time</label>
                        <input type="time" id="endTime" class="form-control" required>
                    </div>
                    <div class="col-md-4">
                        <label for="task" class="form-label">Task Description</label>
                        <input type="text" id="task" class="form-control" placeholder="What are you planning to do?" required>
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button type="submit" class="btn btn-primary w-100 rounded-pill">
                            <i class="fas fa-plus me-2"></i>Add
                        </button>
                    </div>
                </div>
            </form>

            <div class="table-responsive py-3">
                <table class="task-table" id="timeSlotTable">
                    <thead>
                        <tr>
                            <th>Time</th>
                            <th>Status</th>
                            <th>Task</th>
                            <th>Report (Min)</th>
                            <th>Progress</th>
                            <th>Rating</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Example row structure -->
                        <tr>
                            <td>9:00 - 10:00</td>
                            <td>
                                <span class="badge bg-success">Completed</span>
                            </td>
                            <td>Project Planning</td>
                            <td>55</td>
                            <td>
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar" style="width: 85%"></div>
                                </div>
                            </td>
                            <td>
                                <div class="rating">
                                    <i class="fas fa-star text-warning"></i>
                                    <i class="fas fa-star text-warning"></i>
                                    <i class="fas fa-star text-warning"></i>
                                    <i class="fas fa-star text-warning"></i>
                                    <i class="far fa-star text-warning"></i>
                                </div>
                            </td>
                            <td>
                                <div class="btn-group">
                                    <button class="btn btn-sm btn-outline-primary edit-slot" title="Edit">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger delete-slot" title="Delete">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </section>

        <!-- Analytics Section -->
        <section class="analytics-section">
            <h2 class="fw-bold mb-4">
                <i class="fas fa-chart-bar me-2"></i>Productivity Analytics
            </h2>
            <!-- <canvas id="productivityChart"></canvas> -->
            <!-- Today's Analytics Section -->
            <div class="mb-8">
                <h2 class="text-2xl font-bold mb-4">Today</h2>
                <div class="bg-white p-4 rounded-lg shadow">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                    <p class="text-gray-600">Total Slots</p>
                    <p class="text-2xl font-bold" id="todayTotalSlots">-</p>
                    </div>
                    <div>
                    <p class="text-gray-600">Completed Slots</p>
                    <p class="text-2xl font-bold text-green-600" id="todayCompletedSlots">-</p>
                    </div>
                    <div>
                    <p class="text-gray-600">Total Minutes</p>
                    <p class="text-2xl font-bold" id="todayTotalMinutes">-</p>
                    </div>
                    <div>
                    <p class="text-gray-600">Completion Rate</p>
                    <p class="text-2xl font-bold" id="todayCompletionRate">-%</p>
                    </div>
                </div>
                </div>
            </div>
            
            <!-- Add a button to navigate to the analytics page -->
            <div class="mt-4">
                <button class="btn btn-primary" onclick="window.location.href='/analytics'">
                    <i class="fas fa-chart-line me-2"></i>View Detailed Analytics
                </button>
            </div>
        </section>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/static/script.js"></script>

</body>
</html> \n\n./frontend/templates/analytics.html:\n
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Analytics</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@400;500;600;700&display=swap">
  <link rel="stylesheet" href="static/style.css">
  
</head>
<body>
  <!-- Header Section -->
  <header>
    <div class="container flex items-center justify-between" style="display: flex; align-items: center; justify-content: space-between;">
      <div class="logo-title" style="display: flex; align-items: center;">
        <!-- Replace 'logo.png' with your logo image source if available -->
        <img src="static/img/planner_logo.svg" alt="Logo" class="navbar-logo" />
        <h1>Planner Dashboard</h1>
      </div>
      <a href="/" class="back-button">
        <svg fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 18a1 1 0 01-.707-.293l-7-7a1 1 0 010-1.414l7-7a1 1 0 111.414 1.414L5.414 10l5.293 5.293A1 1 0 0110 18z" clip-rule="evenodd"></path>
        </svg>
        Back
      </a>
    </div>
  </header>
  

  <div class="container mx-auto px-4 py-8">
    <!-- Overview Analytics Section -->
    <div class="mb-8">
      <h2 class="text-2xl font-bold mb-4">Overview Analytics</h2>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <!-- Time Slots Card with Detailed Status -->
        <div class="bg-white p-4 rounded-lg shadow">
          <h3 class="text-lg font-semibold mb-2">Time Slots</h3>
          <div class="grid grid-cols-2 gap-2">
            <div>
              <p class="text-gray-600">Total</p>
              <p class="text-2xl font-bold" id="totalSlots">-</p>
            </div>
            <div>
              <p class="text-gray-600">Completed</p>
              <p class="text-2xl font-bold text-green-600" id="completedSlots">-</p>
            </div>
            <div>
              <p class="text-gray-600">In Progress</p>
              <p class="text-2xl font-bold" id="inProgressSlots">-</p>
            </div>
            <div>
              <p class="text-gray-600">Not Started</p>
              <p class="text-2xl font-bold" id="notStartedSlots">-</p>
            </div>
          </div>
        </div>
        <!-- Time Tracking Card -->
        <div class="bg-white p-4 rounded-lg shadow">
          <h3 class="text-lg font-semibold mb-2">Time Tracking</h3>
          <div>
            <p class="text-gray-600">Total Minutes</p>
            <p class="text-2xl font-bold" id="totalMinutes">-</p>
            <p class="text-gray-600 mt-2">Average per Slot</p>
            <p class="text-xl" id="avgMinutes">-</p>
          </div>
        </div>
        <!-- Completion Rate Card -->
        <div class="bg-white p-4 rounded-lg shadow">
          <h3 class="text-lg font-semibold mb-2">Completion Rate</h3>
          <div class="flex items-center justify-center h-24">
            <p class="text-4xl font-bold" id="completionRate">-%</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Today's Analytics Section -->
    <div class="mb-8">
      <h2 class="text-2xl font-bold mb-4">Today's Analytics</h2>
      <div class="bg-white p-4 rounded-lg shadow">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <p class="text-gray-600">Total Slots</p>
            <p class="text-2xl font-bold" id="todayTotalSlots">-</p>
          </div>
          <div>
            <p class="text-gray-600">Completed Slots</p>
            <p class="text-2xl font-bold text-green-600" id="todayCompletedSlots">-</p>
          </div>
          <div>
            <p class="text-gray-600">Total Minutes</p>
            <p class="text-2xl font-bold" id="todayTotalMinutes">-</p>
          </div>
          <div>
            <p class="text-gray-600">Completion Rate</p>
            <p class="text-2xl font-bold" id="todayCompletionRate">-%</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Slot Status Distribution Chart
    <div class="mb-8">
      <h2 class="text-2xl font-bold mb-4">Slot Status Distribution</h2>
      <div class="bg-white p-4 rounded-lg shadow">
        <canvas id="statusDistributionChart"></canvas>
      </div>
    </div> -->

    <!-- Date Range Selection for Detailed Analytics -->
    <div class="mb-8 bg-white p-4 rounded-lg shadow">
      <h3 class="text-lg font-semibold mb-4">Time Range Analysis</h3>
      <div class="flex flex-wrap gap-4 mb-4">
        <div>
          <label class="block text-sm font-medium text-gray-700">Start Date</label>
          <input type="date" id="startDate" class="mt-1 block rounded-md border-gray-300 shadow-sm form-control" />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700">End Date</label>
          <input type="date" id="endDate" class="mt-1 block rounded-md border-gray-300 shadow-sm form-control" />
        </div>
        <div class="flex items-end">
          <button onclick="fetchRangeAnalytics()" class="btn-primary">
            Analyze Range
          </button>
        </div>
      </div>
    </div>

    <!-- Range Analytics Summary -->
    <div class="mb-8">
      <h2 class="text-2xl font-bold mb-4">Range Analytics Summary</h2>
      <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div class="bg-white p-4 rounded-lg shadow">
          <h3 class="text-lg font-semibold mb-2">Total Slots</h3>
          <p class="text-2xl font-bold" id="rangeTotalSlots">-</p>
        </div>
        <div class="bg-white p-4 rounded-lg shadow">
          <h3 class="text-lg font-semibold mb-2">Completed Slots</h3>
          <p class="text-2xl font-bold text-green-600" id="rangeCompletedSlots">-</p>
        </div>
        <div class="bg-white p-4 rounded-lg shadow">
          <h3 class="text-lg font-semibold mb-2">Total Minutes</h3>
          <p class="text-2xl font-bold" id="rangeTotalMinutes">-</p>
        </div>
        <div class="bg-white p-4 rounded-lg shadow">
          <h3 class="text-lg font-semibold mb-2">Avg. Completion Rate</h3>
          <p class="text-2xl font-bold" id="rangeAvgCompletionRate">-%</p>
        </div>
      </div>
    </div>

    <!-- Charts Section for Range Analytics -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
      <div class="bg-white p-4 rounded-lg shadow">
        <h3 class="text-lg font-semibold mb-4">Daily Completion Trend</h3>
        <canvas id="completionTrendChart"></canvas>
      </div>
      <div class="bg-white p-4 rounded-lg shadow">
        <h3 class="text-lg font-semibold mb-4">Time Distribution</h3>
        <canvas id="timeDistributionChart"></canvas>
      </div>
    </div>

    <!-- Range Slot Status Distribution Chart -->
    <div class="mb-8">
      <h2 class="text-2xl font-bold mb-4">Range Slot Status Distribution</h2>
      <div class="bg-white p-4 rounded-lg shadow">
        <canvas id="rangeStatusChart"></canvas>
      </div>
    </div>
  </div>
  <script src="static/script.js"></script>"></script>
</body>
</html>
\n\n./frontend/templates/verify_email.html:\n
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Verify Email | Productivity Planner</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/static/style.css">
    
</head>
<body>
    <div class="container">
        <div class="row justify-content-center align-items-center min-vh-100">
            <div class="col-md-6">
                <div class="card shadow-lg">
                    <div class="card-body p-5 text-center">
                        <img src="/static/img/planner_logo_100x100.png" alt="Planner Logo" class="auth-logo mb-4">
                        <h4 class="mb-3">Email Verification</h4>
                        
                        <!-- Display email prominently -->
                        <div class="alert alert-info mb-4">
                            <i class="fas fa-envelope me-2"></i>
                            <strong>{{ email }}</strong>
                        </div>
                        
                        <div id="sendOtpSection">
                            <p class="text-muted mb-4">
                                To continue using Productivity Planner, please verify your email address.
                            </p>
                            <button id="sendOtpBtn" class="btn btn-primary w-100 mb-3">
                                <i class="fas fa-paper-plane me-2"></i><span id = "sendOtpBtnText">Send Verification Code</span>
                                <div class="loader"></div>
                            </button>
                        </div>

                        <div id="verifyOtpSection" class="d-none">
                            <p class="text-muted mb-4">
                                Please enter the verification code sent to your email.
                            </p>
                            <form id="verifyOtpForm">
                                <div class="mb-4">
                                    <input type="text" 
                                           class="form-control form-control-lg text-center" 
                                           id="otp" 
                                           name="otp" 
                                           placeholder="Enter verification code"
                                           maxlength="6"
                                           required>
                                </div>
                                <button type="submit" class="btn btn-primary w-100 mb-3">
                                    <i class="fas fa-check-circle me-2"></i> Verify Code
                                    <div class="loader"></div>
                                </button>
                            </form>
                            <p class="mb-0">
                                <button id="resendOtpBtn" class="btn btn-link text-decoration-none">
                                    <i class="fas fa-redo me-2"></i>Resend verification code
                                    <div class="loader"></div>
                                </button>
                            </p>
                            <small class="text-muted mt-2">
                                Note: Maximum 3 attempts allowed per hour
                            </small>
                        </div>

                        <!-- Error message container -->
                        <div id="errorMessage" class="alert alert-danger mt-3 d-none">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const email = "{{ email }}";
    </script>
    <script src="static/script.js"></script>
</body>
</html>\n\n./app/config.py:\n
from pydantic_settings import BaseSettings

class Settings(BaseSettings):
    DATABASE_URL: str = "sqlite:///./app.db"
    SECRET_KEY: str = "your-secret-key"
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30
    
    # Google OAuth Settings
    GOOGLE_CLIENT_ID: str
    GOOGLE_CLIENT_SECRET: str
    GOOGLE_CONF_URL: str = 'https://accounts.google.com/.well-known/openid-configuration'

    class Config:
        env_file = ".env"
        case_sensitive = True

settings = Settings()\n\n./app/time_slots/services.py:\n
from sqlalchemy.orm import Session
from . import schemas
from .. import models
from typing import Optional
from datetime import date,timedelta

def get_time_slots(db: Session, user_id: int, date: Optional[date] = None):
    query = db.query(models.TimeSlot).filter(models.TimeSlot.owner_id == user_id)
    if date:
        query = query.filter(models.TimeSlot.start_time >= date, models.TimeSlot.end_time < date + timedelta(days=1))
    return query.all()

def get_time_slot(db: Session, slot_id: int, user_id: int):
    return db.query(models.TimeSlot).filter(models.TimeSlot.id == slot_id, models.TimeSlot.owner_id == user_id).first()

def create_time_slot(db: Session, time_slot: schemas.TimeSlotCreate, owner_id: int):
    db_time_slot = models.TimeSlot(**time_slot.model_dump(), owner_id=owner_id)  # Updated for Pydantic v2
    db.add(db_time_slot)
    db.commit()
    db.refresh(db_time_slot)
    return db_time_slot

def update_time_slot(db: Session, time_slot: models.TimeSlot, update: schemas.TimeSlotUpdate):
    for key, value in update.model_dump(exclude_unset=True).items():  # Updated for Pydantic v2
        setattr(time_slot, key, value)
    db.commit()
    db.refresh(time_slot)
    return time_slot\n\n./app/time_slots/schemas.py:\n
from pydantic import BaseModel,Field
from typing import Optional
from datetime import datetime

class TimeSlotBase(BaseModel):
    start_time: datetime
    end_time: datetime
    description: Optional[str] = None
    report_minutes: Optional[int] = None
    status: Optional[str] = Field(default="not_started", description="Status of the time slot: completed, in_progress, not_started")

class TimeSlotCreate(TimeSlotBase):
    pass

class TimeSlotUpdate(BaseModel):
    start_time: Optional[datetime] = None
    end_time: Optional[datetime] = None
    description: Optional[str] = None
    report_minutes: Optional[int] = None
    status: Optional[str] = Field(None, description="Status of the time slot: completed, in_progress, not_started")

    class Config:
        orm_mode = True
class TimeSlot(TimeSlotBase): 
    id: int
    owner_id: int

    class Config:
        from_attributes = True \n\n./app/time_slots/router.py:\n
from fastapi import APIRouter, Depends, HTTPException, Query,status
from sqlalchemy.orm import Session
from typing import List, Optional
from datetime import date
from ..dependencies import get_db
from ..auth.dependencies import get_current_user
from . import services
from . import schemas
from ..users.schemas import User
from ..models import TimeSlot


router = APIRouter(prefix="/time_slots", tags=["time_slots"])

@router.get("/", response_model=List[schemas.TimeSlot])
def read_time_slots(
    date: Optional[date] = Query(None, description="Filter time slots by date"),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    return services.get_time_slots(db=db, user_id=current_user.id, date=date)

@router.post("/", response_model=schemas.TimeSlot)
def create_time_slot(
    time_slot: schemas.TimeSlotCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    return services.create_time_slot(db=db, time_slot=time_slot, owner_id=current_user.id)

@router.patch("/{slot_id}", response_model=schemas.TimeSlot)
def update_time_slot(
    slot_id: int,
    update: schemas.TimeSlotUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    slot = services.get_time_slot(db, slot_id, current_user.id)
    if not slot:
        raise HTTPException(status_code=404, detail="Time slot not found")
    return services.update_time_slot(db, slot, update)




@router.put("/{slot_id}", response_model=schemas.TimeSlot)
async def update_time_slot(
    slot_id: int,
    slot_update: schemas.TimeSlotUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    # Check if time slot exists and belongs to current user
    db_slot = db.query(TimeSlot).filter(
        TimeSlot.id == slot_id,
        TimeSlot.owner_id == current_user.id
    ).first()
    
    if not db_slot:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Time slot not found"
        )
    
    # Update the slot with new values
    for key, value in slot_update.dict(exclude_unset=True).items():
        setattr(db_slot, key, value)
    
    try:
        db.commit()
        db.refresh(db_slot)
        return db_slot
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )

# Delete time slot endpoint
@router.delete("/{slot_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_time_slot(
    slot_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    # Check if time slot exists and belongs to current user
    db_slot = db.query(TimeSlot).filter(
        TimeSlot.id == slot_id,
        TimeSlot.owner_id == current_user.id
    ).first()
    
    if not db_slot:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Time slot not found"
        )
    
    try:
        db.delete(db_slot)
        db.commit()
        return None
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )\n\n./app/utils.py:\n
from passlib.context import CryptContext

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)\n\n./app/users/services.py:\n
from sqlalchemy.orm import Session
from ..models import User, EmailVerification
from ..utils import get_password_hash
from .schemas import UserCreate
from datetime import datetime, timedelta
import random
import string
import httpx

def get_user(db: Session, user_id: int):
    return db.query(User).filter(User.id == user_id).first()

def get_user_by_email(db: Session, email: str):
    return db.query(User).filter(User.email == email).first()

def generate_otp(length: int = 6) -> str:
    return ''.join(random.choices(string.digits, k=length))


async def send_verification_email(email: str, name: str, otp: str):
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                'https://util.mhbhat.in/send_otp_mail.php',  # Update URL as needed
                data={  # Use the `data` parameter to send form-encoded data
                    'email_to': email,
                    'name': name,
                    'otp': otp
                }
            )
            response.raise_for_status()
            return True
    except Exception as e:
        print(f"Error sending email: {str(e)}")
        return False

def create_email_verification(db: Session, email: str) -> EmailVerification:
    # Delete any existing unused verifications for this email
    db.query(EmailVerification).filter(
        EmailVerification.email == email,
        EmailVerification.is_used == False
    ).delete()
    
    otp = generate_otp()
    expires_at = datetime.utcnow() + timedelta(minutes=15)  # OTP expires in 15 minutes
    
    verification = EmailVerification(
        email=email,
        otp=otp,
        expires_at=expires_at
    )
    db.add(verification)
    db.commit()
    db.refresh(verification)
    return verification

def verify_otp(db: Session, email: str, otp: str) -> bool:
    verification = db.query(EmailVerification).filter(
        EmailVerification.email == email,
        EmailVerification.otp == otp,
        EmailVerification.is_used == False,
        EmailVerification.expires_at > datetime.utcnow()
    ).first()
    
    if verification:
        # Mark OTP as used
        verification.is_used = True
        # Mark user as verified
        user = get_user_by_email(db, email)
        if user:
            user.is_email_verified = True
        db.commit()
        return True
    return False

def create_user(db: Session, user: UserCreate):
    hashed_password = get_password_hash(user.password)
    db_user = User(
        email=user.email,
        username=user.username,
        hashed_password=hashed_password,
        is_email_verified=False  # New users start unverified
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

def get_user_by_username(db: Session, username: str):
    return db.query(User).filter(User.username == username).first() \n\n./app/users/schemas.py:\n
from pydantic import BaseModel, EmailStr, constr

class UserBase(BaseModel):
    email: EmailStr
    username: constr(min_length=3, max_length=50, pattern=r"^[a-zA-Z0-9_-]+$")  # Alphanumeric with _ and -

class UserCreate(UserBase):
    password: str

class User(UserBase):
    id: int
    is_active: bool = True
    is_email_verified: bool = False

    class Config:
        from_attributes = True \n\n./app/users/router.py:\n
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from ..dependencies import get_db
from . import services
from . import schemas

router = APIRouter(prefix="/users", tags=["users"])

@router.post("/", response_model=schemas.User)
def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    # Check if email exists
    db_user = services.get_user_by_email(db, email=user.email)
    if db_user:
        raise HTTPException(status_code=400, detail="Email already registered")
    
    # Check if username exists
    db_user = services.get_user_by_username(db, username=user.username)
    if db_user:
        raise HTTPException(status_code=400, detail="Username already taken")
    
    return services.create_user(db=db, user=user)

@router.get("/{user_id}", response_model=schemas.User)
def read_user(user_id: int, db: Session = Depends(get_db)):
    db_user = services.get_user(db, user_id=user_id)
    if db_user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return db_user \n\n./app/__init__.py:\n
from app.database import Base, engine

# Drop all tables and recreate them
Base.metadata.drop_all(bind=engine)
Base.metadata.create_all(bind=engine)
\n\n./app/goals/services.py:\n
from sqlalchemy.orm import Session
from ..models import Goal, GoalStep
from .schemas import GoalCreate, GoalStepCreate

def get_goals(db: Session, user_id: int):
    return db.query(Goal).filter(Goal.owner_id == user_id).all()

def create_goal(db: Session, goal: GoalCreate, user_id: int):
    db_goal = Goal(**goal.dict(), owner_id=user_id)
    db.add(db_goal)
    db.commit()
    db.refresh(db_goal)
    return db_goal

def create_goal_step(db: Session, step: GoalStepCreate, goal_id: int):
    db_step = GoalStep(**step.dict(), goal_id=goal_id)
    db.add(db_step)
    db.commit()
    db.refresh(db_step)
    return db_step \n\n./app/goals/schemas.py:\n
from pydantic import BaseModel
from typing import Optional, List
from datetime import datetime

class GoalStepBase(BaseModel):
    title: str
    description: Optional[str] = None
    completed: bool = False

class GoalStepCreate(GoalStepBase):
    pass

class GoalStep(GoalStepBase):
    id: int
    goal_id: int
    created_at: datetime

    class Config:
        from_attributes = True

class GoalBase(BaseModel):
    title: str
    description: Optional[str] = None
    target_date: Optional[datetime] = None

class GoalCreate(GoalBase):
    pass

class Goal(GoalBase):
    id: int
    owner_id: int
    created_at: datetime
    steps: List[GoalStep] = []

    class Config:
        from_attributes = True \n\n./app/goals/router.py:\n
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from ..dependencies import get_db
from ..auth.dependencies import get_current_user
from . import services
from . import schemas
from ..users.schemas import User

router = APIRouter(prefix="/goals", tags=["goals"])

@router.post("/", response_model=schemas.Goal)
def create_goal(
    goal: schemas.GoalCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    return services.create_goal(db=db, goal=goal, user_id=current_user.id)

@router.get("/", response_model=List[schemas.Goal])
def read_goals(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    return services.get_goals(db=db, user_id=current_user.id)

@router.post("/{goal_id}/steps/", response_model=schemas.GoalStep)
def create_goal_step(
    goal_id: int,
    step: schemas.GoalStepCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    return services.create_goal_step(db=db, step=step, goal_id=goal_id) \n\n./app/main.py:\n
# app/main.py
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from starlette.middleware.sessions import SessionMiddleware
from . import models, database
from .web_router import router as web_router
from .api_router import router as api_router
from .analytics.router import router as analytics_router

from .config import settings

# Create database tables
models.Base.metadata.create_all(bind=database.engine)

app = FastAPI()

# Add session middleware - required for OAuth
app.add_middleware(SessionMiddleware, secret_key=settings.SECRET_KEY)


app.mount("/static", StaticFiles(directory="frontend/static"), name="static")

# Mount static files
# app.mount("/templates", StaticFiles(directory="frontend/templates"), name="templates")

# Include routers
app.include_router(web_router)
app.include_router(api_router)
app.include_router(analytics_router)


\n\n./app/api_router.py:\n
from fastapi import APIRouter
from .users.router import router as users_router
from .tasks.router import router as tasks_router
from .goals.router import router as goals_router
from .time_slots.router import router as time_slots_router
# from .analytics.router import router as analytics_router
from .auth.router import router as auth_router

router = APIRouter(prefix="/api")

router.include_router(auth_router)
router.include_router(users_router)
router.include_router(tasks_router)
router.include_router(goals_router)
router.include_router(time_slots_router)
# router.include_router(analytics_router)
\n\n./app/database.py:\n
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

from .config import settings

SQLALCHEMY_DATABASE_URL = settings.DATABASE_URL

engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()\n\n./app/models.py:\n
from sqlalchemy import Column, Integer, String, ForeignKey, Boolean, DateTime, Float
from sqlalchemy.orm import relationship
from datetime import datetime
from .database import Base
from sqlalchemy import Date

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    email = Column(String, unique=True, index=True)
    username = Column(String, unique=True, index=True)
    hashed_password = Column(String)
    is_active = Column(Boolean, default=True)
    is_email_verified = Column(Boolean, default=False)
    tasks = relationship("Task", back_populates="owner")
    goals = relationship("Goal", back_populates="owner")
    time_slots = relationship("TimeSlot", back_populates="owner")
    created_at = Column(DateTime, default=datetime.utcnow)

class Task(Base):
    __tablename__ = "tasks"
    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, index=True)
    description = Column(String, index=True)
    completed = Column(Boolean, default=False)
    time_spent = Column(Float, default=0.0)  # Time spent in hours
    owner_id = Column(Integer, ForeignKey("users.id"))
    owner = relationship("User", back_populates="tasks")
    created_at = Column(DateTime, default=datetime.utcnow)

class Goal(Base):
    __tablename__ = "goals"
    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, index=True)
    description = Column(String, index=True)
    completed = Column(Boolean, default=False)
    steps = relationship("GoalStep", back_populates="goal")
    owner_id = Column(Integer, ForeignKey("users.id"))
    owner = relationship("User", back_populates="goals")
    created_at = Column(DateTime, default=datetime.utcnow)

class GoalStep(Base):
    __tablename__ = "goal_steps"
    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, index=True)
    completed = Column(Boolean, default=False)
    goal_id = Column(Integer, ForeignKey("goals.id"))
    goal = relationship("Goal", back_populates="steps")
    created_at = Column(DateTime, default=datetime.utcnow)

class TimeSlot(Base):
    __tablename__ = "time_slots"
    id = Column(Integer, primary_key=True, index=True)
    date = Column(Date, index=True)  # New column to store the date
    start_time = Column(DateTime, index=True)
    end_time = Column(DateTime, index=True)
    description = Column(String, index=True)
    owner_id = Column(Integer, ForeignKey("users.id"))
    owner = relationship("User", back_populates="time_slots")

    report_minutes = Column(Integer, default=0)
    status = Column(String, default="not_started", nullable=False)  # New field
    created_at = Column(DateTime, default=datetime.utcnow)

class EmailVerification(Base):
    __tablename__ = "email_verifications"
    id = Column(Integer, primary_key=True, index=True)
    email = Column(String, index=True)
    otp = Column(String)
    created_at = Column(DateTime, default=datetime.utcnow)
    expires_at = Column(DateTime)
    is_used = Column(Boolean, default=False)
    

\n\n./app/analytics/services.py:\n
from sqlalchemy.orm import Session
from sqlalchemy import func, and_
from datetime import datetime, date, timedelta
from typing import List, Optional

from app.models import TimeSlot
from app.analytics.schemas import TimeSlotAnalytics, DailyAnalytics, TimeRangeAnalytics

class AnalyticsService:
    def __init__(self, db: Session):
        self.db = db

    def get_user_analytics(self, user_id: int) -> TimeSlotAnalytics:
        """Get overall analytics for a user's time slots."""
        # Get all time slots for the user
        query = self.db.query(TimeSlot).filter(TimeSlot.owner_id == user_id)
        
        total_slots = query.count()
        completed_slots = query.filter(TimeSlot.status == "completed").count()
        in_progress_slots = query.filter(TimeSlot.status == "in_progress").count()
        not_started_slots = query.filter(TimeSlot.status == "not_started").count()
        
        # Calculate total minutes reported
        total_minutes = self.db.query(func.sum(TimeSlot.report_minutes))\
            .filter(TimeSlot.owner_id == user_id)\
            .scalar() or 0
            
        # Calculate averages and rates
        avg_minutes = total_minutes / total_slots if total_slots > 0 else 0
        completion_rate = (completed_slots / total_slots * 100) if total_slots > 0 else 0
        
        return TimeSlotAnalytics(
            total_slots=total_slots,
            completed_slots=completed_slots,
            in_progress_slots=in_progress_slots,
            not_started_slots=not_started_slots,
            total_minutes_reported=total_minutes,
            average_minutes_per_slot=round(avg_minutes, 2),
            completion_rate=round(completion_rate, 2)
        )

    def get_daily_analytics(self, user_id: int, target_date: date) -> DailyAnalytics:
        """Get analytics for a specific day."""
        start_datetime = datetime.combine(target_date, datetime.min.time())
        end_datetime = datetime.combine(target_date + timedelta(days=1), datetime.min.time())
        
        query = self.db.query(TimeSlot).filter(
            TimeSlot.owner_id == user_id,
            TimeSlot.start_time >= start_datetime,
            TimeSlot.start_time < end_datetime
        )
        
        total_slots = query.count()
        completed_slots = query.filter(TimeSlot.status == "completed").count()
        total_minutes = self.db.query(func.sum(TimeSlot.report_minutes))\
            .filter(
                TimeSlot.owner_id == user_id,
                TimeSlot.start_time >= start_datetime,
                TimeSlot.start_time < end_datetime
            ).scalar() or 0
            
        completion_rate = (completed_slots / total_slots * 100) if total_slots > 0 else 0
        
        return DailyAnalytics(
            date=target_date,
            total_slots=total_slots,
            completed_slots=completed_slots,
            total_minutes=total_minutes,
            completion_rate=round(completion_rate, 2)
        )

    def get_time_range_analytics(
        self, 
        user_id: int, 
        start_date: date, 
        end_date: date
    ) -> TimeRangeAnalytics:
        """Get analytics for a specific time range."""
        daily_analytics = []
        current_date = start_date
        
        total_slots = 0
        total_completed = 0
        total_minutes = 0
        
        while current_date <= end_date:
            daily_stats = self.get_daily_analytics(user_id, current_date)
            daily_analytics.append(daily_stats)
            
            total_slots += daily_stats.total_slots
            total_completed += daily_stats.completed_slots
            total_minutes += daily_stats.total_minutes
            
            current_date += timedelta(days=1)
            
        avg_completion_rate = (total_completed / total_slots * 100) if total_slots > 0 else 0
        
        return TimeRangeAnalytics(
            start_date=start_date,
            end_date=end_date,
            daily_analytics=daily_analytics,
            total_slots=total_slots,
            total_completed=total_completed,
            total_minutes=total_minutes,
            average_completion_rate=round(avg_completion_rate, 2)
        )
    

# from sqlalchemy.orm import Session
# from sqlalchemy import func
from datetime import datetime, timedelta
from app.models import TimeSlot, User  # Adjust based on your models

def get_top_users_by_time_spent(db: Session, timeframe: str, limit: int = 5):
    """
    Get the top users based on the time spent in a given timeframe.
    
    :param db: Database session
    :param timeframe: 'daily', 'weekly', 'monthly'
    :param limit: Number of top users to return
    :return: List of top users with their time spent
    """
    now = datetime.utcnow()
    
    if timeframe == "daily":
        start_date = now - timedelta(days=1)
    elif timeframe == "weekly":
        start_date = now - timedelta(weeks=1)
    elif timeframe == "monthly":
        start_date = now - timedelta(days=30)
    else:
        raise ValueError("Invalid timeframe. Choose 'daily', 'weekly', or 'monthly'.")

    # Query to sum the reported minutes per user
    results = (
        db.query(
            TimeSlot.owner_id, 
            func.sum(TimeSlot.report_minutes).label("total_time"),
            User.username
        )
        .join(User, User.id == TimeSlot.owner_id)
        .filter(TimeSlot.start_time >= start_date)
        .group_by(TimeSlot.owner_id, User.username)
        .order_by(func.sum(TimeSlot.report_minutes).desc())
        .limit(limit)
        .all()
    )

    return [{"user_id": r.owner_id, "username": r.username, "total_time": r.total_time} for r in results]
\n\n./app/analytics/schemas.py:\n
from pydantic import BaseModel
from typing import List, Optional
from datetime import datetime, date

class TimeSlotAnalytics(BaseModel):
    total_slots: int
    completed_slots: int
    in_progress_slots: int
    not_started_slots: int
    total_minutes_reported: int
    average_minutes_per_slot: float
    completion_rate: float

class DailyAnalytics(BaseModel):
    date: date
    total_slots: int
    completed_slots: int
    total_minutes: int
    completion_rate: float

class TimeRangeAnalytics(BaseModel):
    start_date: date
    end_date: date
    daily_analytics: List[DailyAnalytics]
    total_slots: int
    total_completed: int
    total_minutes: int
    average_completion_rate: float\n\n./app/analytics/router.py:\n
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from datetime import date
from typing import Optional

from app.database import get_db
from app.auth.dependencies import get_current_user
from app.analytics.services import AnalyticsService
from app.analytics.schemas import TimeSlotAnalytics, DailyAnalytics, TimeRangeAnalytics

router = APIRouter(prefix="/analytics", tags=["analytics"])

@router.get("/overview", response_model=TimeSlotAnalytics)
def get_overview_analytics(
    current_user: dict = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Get overview analytics for the current user's time slots."""
    analytics_service = AnalyticsService(db)
    return analytics_service.get_user_analytics(current_user.id)

@router.get("/daily/{date}", response_model=DailyAnalytics)
def get_daily_analytics(
    date: date,
    current_user: dict = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Get analytics for a specific day."""
    analytics_service = AnalyticsService(db)
    return analytics_service.get_daily_analytics(current_user.id, date)

@router.get("/range", response_model=TimeRangeAnalytics)
def get_range_analytics(
    start_date: date,
    end_date: date,
    current_user: dict = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Get analytics for a specific date range."""
    if start_date > end_date:
        raise HTTPException(
            status_code=400,
            detail="Start date must be before or equal to end date"
        )
        
    analytics_service = AnalyticsService(db)
    return analytics_service.get_time_range_analytics(
        current_user.id,
        start_date,
        end_date
    )

@router.get("/today", response_model=DailyAnalytics)
def get_today_analytics(
    current_user: dict = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Get analytics for the current day."""
    today = date.today()
    analytics_service = AnalyticsService(db)
    return analytics_service.get_daily_analytics(current_user.id, today)



# from fastapi import APIRouter, Depends
# from sqlalchemy.orm import Session
# from app.dependencies import get_db
from .services import get_top_users_by_time_spent

# router = APIRouter()

@router.get("/top-users/{timeframe}")
def top_users(timeframe: str, db: Session = Depends(get_db)):
    """
    Get top users by time spent for a given timeframe ('daily', 'weekly', 'monthly').
    """
    if timeframe not in ["daily", "weekly", "monthly"]:
        return {"error": "Invalid timeframe. Use 'daily', 'weekly', or 'monthly'."}

    return get_top_users_by_time_spent(db, timeframe)
\n\n./app/auth/oauth.py:\n
from authlib.integrations.starlette_client import OAuth
from starlette.config import Config
from starlette.requests import Request
from fastapi import HTTPException
from fastapi.responses import RedirectResponse
import httpx
from sqlalchemy.orm import Session
from ..config import settings
from ..users import services as user_services, schemas
import secrets

# OAuth setup
oauth = OAuth()
oauth.register(
    name='google',
    server_metadata_url=settings.GOOGLE_CONF_URL,
    client_kwargs={
        'scope': 'openid email profile',
        'prompt': 'select_account'
    },
    client_id=settings.GOOGLE_CLIENT_ID,
    client_secret=settings.GOOGLE_CLIENT_SECRET,
    authorize_params={
        'access_type': 'offline'  # Enable refresh token
    }
)

async def google_oauth_init(request: Request):
    try:
        # Construct the callback URL to match Google OAuth settings
        base_url = str(request.base_url).rstrip('/')
        redirect_uri = f"{base_url}/api/auth/callback"
        
        print(f"Redirect URI: {redirect_uri}")  # Debug print
        
        # Force http for local development if needed
        if not request.url.is_secure:
            redirect_uri = redirect_uri.replace('https://', 'http://')
        
        return await oauth.google.authorize_redirect(
            request,
            redirect_uri,
            access_type='offline'  # Request refresh token
        )
    except Exception as e:
        print(f"Error in google_oauth_init: {str(e)}")
        raise

async def get_google_oauth_token(request: Request):
    try:
        # Debug print the request URL
        print(f"Callback URL: {request.url}")
        
        # Get the token
        token = await oauth.google.authorize_access_token(request)
        if not token:
            print("No token received from Google")
            raise HTTPException(status_code=400, detail="No token received from Google")
        
        print(f"Received token: {token.keys()}")  # Debug print token keys
        
        # Get user info using the access token
        async with httpx.AsyncClient() as client:
            headers = {'Authorization': f'Bearer {token["access_token"]}'}
            response = await client.get('https://www.googleapis.com/oauth2/v3/userinfo', headers=headers)
            
            if response.status_code != 200:
                print(f"Failed to get user info. Status: {response.status_code}")
                raise HTTPException(status_code=400, detail="Failed to get user info from Google")
            
            user_info = response.json()
            print(f"User info received: {user_info}")  # Debug print
            
            if not user_info or 'email' not in user_info:
                raise HTTPException(status_code=400, detail="Invalid user info received from Google")
            
            return user_info
            
    except Exception as e:
        print(f"Error in get_google_oauth_token: {str(e)}")
        if 'token' in locals():
            print(f"Token data: {token}")
        raise HTTPException(status_code=400, detail=f"Authentication failed: {str(e)}")

async def get_or_create_user_from_google(db: Session, google_user: dict):
    email = google_user.get('email')
    if not email:
        raise HTTPException(status_code=400, detail="Invalid Google user data")
    
    user = user_services.get_user_by_email(db, email=email)
    if not user:
        # Create new user with random password since they'll use Google login
        random_pass = secrets.token_urlsafe(32)
        # get first part of email as username
        username = email.split('@')[0]
        user_create = schemas.UserCreate(email=email, password=random_pass, username=username)
        user = user_services.create_user(db=db, user=user_create)
    
    return user \n\n./app/auth/services.py:\n
from datetime import datetime, timedelta
from jose import JWTError, jwt
from passlib.context import CryptContext
from typing import Optional
from ..config import settings

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password: str) -> str:
    return pwd_context.hash(password)

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None) -> str:
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)
    return encoded_jwt \n\n./app/auth/router.py:\n
from datetime import timedelta, datetime
from fastapi import APIRouter, Depends, HTTPException, Request, Form
from fastapi.security import OAuth2PasswordRequestForm
from fastapi.responses import HTMLResponse, RedirectResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session
from ..dependencies import get_db
from ..users import services as user_services
from . import services, oauth
from ..config import settings
from typing import Optional
import time

router = APIRouter(prefix="/auth", tags=["auth"])
templates = Jinja2Templates(directory="frontend/templates")

# Rate limiting storage
verification_attempts = {}  # {email: [(timestamp, attempt_count)]}

def check_rate_limit(email: str) -> bool:
    """Check if email has exceeded rate limit (3 attempts per hour)"""
    now = time.time()
    hour_ago = now - 3600  # 1 hour ago
    
    # Clean up old attempts
    if email in verification_attempts:
        verification_attempts[email] = [
            (ts, count) for ts, count in verification_attempts[email] 
            if ts > hour_ago
        ]
    
    # Count recent attempts
    attempts = verification_attempts.get(email, [])
    recent_attempts = sum(count for ts, count in attempts if ts > hour_ago)
    
    return recent_attempts < 3

def add_verification_attempt(email: str):
    """Record a verification attempt"""
    now = time.time()
    if email not in verification_attempts:
        verification_attempts[email] = []
    verification_attempts[email].append((now, 1))

@router.post("/token")
async def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    user = user_services.get_user_by_email(db, email=form_data.username)
    if not user:
        raise HTTPException(status_code=400, detail="Incorrect email or password")
    
    if not services.verify_password(form_data.password, user.hashed_password):
        raise HTTPException(status_code=400, detail="Incorrect email or password")
    
    # If email is not verified, redirect to verification page
    if not user.is_email_verified:
        return JSONResponse(
            content={"message": "verify_email", "email": user.email},
            status_code=200
        )
    
    access_token = services.create_access_token(
        data={"sub": user.email},
        expires_delta=timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    )
    return {"access_token": access_token, "token_type": "bearer"}

@router.post("/send-verification")
async def send_verification(email: str, db: Session = Depends(get_db)):
    user = user_services.get_user_by_email(db, email=email)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    # Check rate limit
    if not check_rate_limit(email):
        raise HTTPException(
            status_code=429, 
            detail="Too many verification attempts. Please try again in an hour."
        )
    
    verification = user_services.create_email_verification(db, email)
    success = await user_services.send_verification_email(
        email=email,
        name=email.split("@")[0],
        otp=verification.otp
    )
    
    if not success:
        raise HTTPException(status_code=500, detail="Failed to send verification email")
    
    # Record the attempt
    add_verification_attempt(email)
    
    return {"message": "Verification email sent"}

@router.post("/verify-otp")
async def verify_otp(
    email: str = Form(...),
    otp: str = Form(...),
    db: Session = Depends(get_db)
):
    if user_services.verify_otp(db, email, otp):
        # Create access token after successful verification
        access_token = services.create_access_token(
            data={"sub": email},
            expires_delta=timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
        )
        return {
            "message": "Email verified successfully",
            "access_token": access_token,
            "token_type": "bearer"
        }
    raise HTTPException(status_code=400, detail="Invalid or expired OTP")

@router.get('/login/google')
async def google_login(request: Request):
    return await oauth.google_oauth_init(request)

@router.get('/callback')
async def auth_callback(request: Request, db: Session = Depends(get_db)):
    try:
        print("Auth callback received. Starting Google token retrieval...")
        
        google_user = await oauth.get_google_oauth_token(request)
        print(f"Google user data received: {google_user}")
        
        user = await oauth.get_or_create_user_from_google(db, google_user)
        print(f"User retrieved/created with email: {user.email}")
        
        # Create access token
        access_token = services.create_access_token(
            data={"sub": user.email},
            expires_delta=timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
        )
        
        # Return the callback template with the token data
        return templates.TemplateResponse(
            "callback.html",
            {
                "request": request,
                "access_token": access_token,
                "token_type": "bearer"
            }
        )
        
    except Exception as e:
        import traceback
        print(f"Error during Google authentication: {str(e)}")
        print("Full traceback:")
        print(traceback.format_exc())
        return templates.TemplateResponse(
            "callback.html",
            {
                "request": request,
                "detail": str(e)
            },
            status_code=400
        ) \n\n./app/auth/dependencies.py:\n
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from sqlalchemy.orm import Session
from ..dependencies import get_db
from ..users import services as user_services
from ..config import settings

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/token")

async def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        email: str = payload.get("sub")
        if email is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception
    
    user = user_services.get_user_by_email(db, email=email)
    if user is None:
        raise credentials_exception
    return user

async def get_current_verified_user(
    current_user = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    # Skip verification for Google OAuth users (they are pre-verified)
    if not current_user.is_email_verified:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Email not verified. Please verify your email first."
        )
    return current_user \n\n./app/web_router.py:\n
from fastapi import APIRouter, Request, Query, HTTPException, Depends
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from typing import Optional
from .users import services as user_services
from .dependencies import get_db

from sqlalchemy.orm import Session

router = APIRouter(tags=["web"])

templates = Jinja2Templates(directory="frontend/templates")

@router.get("/", response_class=HTMLResponse)
async def read_root(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

@router.get("/login", response_class=HTMLResponse)
async def read_login(request: Request, error: Optional[str] = Query(None)):
    return templates.TemplateResponse("login.html", {"request": request, "error": error})

@router.get("/register", response_class=HTMLResponse)
async def read_register(request: Request):
    return templates.TemplateResponse("register.html", {"request": request})

@router.get("/verify-email", response_class=HTMLResponse)
async def read_verify_email(
    request: Request,
    email: str,
    db: Session = Depends(get_db)
):
    # Check if the user exists and is not verified
    user = user_services.get_user_by_email(db, email=email)
    if not user:
        return RedirectResponse(url="/register")
    if user.is_email_verified:
        return RedirectResponse(url="/login")
    
    return templates.TemplateResponse(
        "verify_email.html", 
        {"request": request, "email": email}
    )

@router.get("/dashboard", response_class=HTMLResponse)
async def read_dashboard(request: Request):
    return templates.TemplateResponse("dashboard.html", {"request": request}) 

@router.get("/analytics", response_class=HTMLResponse)
async def read_dashboard(request: Request):
    return templates.TemplateResponse("analytics.html", {"request": request}) \n\n./app/tasks/services.py:\n
from sqlalchemy.orm import Session
from ..models import Task
from .schemas import TaskCreate, TaskUpdate

def get_tasks(db: Session, user_id: int):
    return db.query(Task).filter(Task.owner_id == user_id).all()

def get_task(db: Session, task_id: int, user_id: int):
    return db.query(Task).filter(Task.id == task_id, Task.owner_id == user_id).first()

def create_task(db: Session, task: TaskCreate, user_id: int):
    db_task = Task(**task.dict(), owner_id=user_id)
    db.add(db_task)
    db.commit()
    db.refresh(db_task)
    return db_task

def update_task(db: Session, task: Task, task_update: TaskUpdate):
    if task_update.completed is not None:
        task.completed = task_update.completed
    if task_update.time_spent is not None:
        task.time_spent = task_update.time_spent
    db.commit()
    db.refresh(task)
    return task \n\n./app/tasks/schemas.py:\n
from pydantic import BaseModel
from typing import Optional
from datetime import datetime

class TaskBase(BaseModel):
    title: str
    description: Optional[str] = None
    due_date: Optional[datetime] = None

class TaskCreate(TaskBase):
    pass

class TaskUpdate(BaseModel):
    completed: Optional[bool] = None
    time_spent: Optional[int] = None

class Task(TaskBase):
    id: int
    owner_id: int
    completed: bool = False
    time_spent: int = 0
    created_at: datetime

    class Config:
        from_attributes = True \n\n./app/tasks/router.py:\n
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from ..dependencies import get_db
from ..auth.dependencies import get_current_user
from . import services
from . import schemas
from ..users.schemas import User

router = APIRouter(prefix="/tasks", tags=["tasks"])

@router.post("/", response_model=schemas.Task)
def create_task(
    task: schemas.TaskCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    return services.create_task(db=db, task=task, user_id=current_user.id)

@router.get("/", response_model=List[schemas.Task])
def read_tasks(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    return services.get_tasks(db=db, user_id=current_user.id)

@router.patch("/{task_id}", response_model=schemas.Task)
def update_task(
    task_id: int,
    task_update: schemas.TaskUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    db_task = services.get_task(db, task_id=task_id, user_id=current_user.id)
    if not db_task:
        raise HTTPException(status_code=404, detail="Task not found")
    return services.update_task(db=db, task=db_task, task_update=task_update) \n\n./app/dependencies.py:\n
from .database import SessionLocal

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()\n\n./insert_data.py:\n
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from app.database import SessionLocal
from app.models import TimeSlot  # Assuming models.py defines the SQLAlchemy ORM model

# Create a new session
db: Session = SessionLocal()

# Generate and insert bulk data
time_slots = []
base_time = datetime(2025, 2, 12, 8, 0, 0)  # Starting at 8 AM

for i in range(1, 101):  # Insert 100 records
    start_time = base_time + timedelta(minutes=i * 15)  # 15-minute intervals
    end_time = start_time + timedelta(minutes=30)  # 30-minute slots
    status = ["not_started", "in_progress", "completed"][i % 3]  # Cycle through statuses

    time_slot = TimeSlot(
        start_time=start_time,
        end_time=end_time,
        description=f"Time Slot {i}",
        report_minutes=(i % 10) * 5,  # Some random report minutes
        status=status,
        owner_id=(i % 5) + 1  # Assigning to owners 1-5
    )

    time_slots.append(time_slot)

# Bulk insert
db.bulk_save_objects(time_slots)
db.commit()
db.close()

print("Inserted 100 time slots successfully.")
\n\n./create_data.py:\n
from datetime import datetime, timedelta
from app.models import Base, User, TimeSlot
import random
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

engine = create_engine('sqlite:///app.db')
Base.metadata.create_all(engine)

Session = sessionmaker(bind=engine)
session = Session()

def random_date(start, end):
    return start + timedelta(
        seconds=random.randint(0, int((end - start).total_seconds())),
    )

# Query the existing user
user = session.query(User).filter_by(email='musavir119s@gmail.com').first()

if user is None:
    print("User not found")
else:
    num_time_slots = 1000
    time_slots = []
    for _ in range(num_time_slots):
        start_time = random_date(datetime(2024, 1, 1), datetime(2025, 12, 31))
        end_time = start_time + timedelta(hours=random.randint(1, 5))
        report_minutes = (end_time - start_time).seconds // 60

        time_slot = TimeSlot(
            date=start_time.date(),
            start_time=start_time,
            end_time=end_time,
            description=f'Time slot {_}',
            report_minutes=report_minutes,
            owner=user,
        )
        time_slots.append(time_slot)

    session.add_all(time_slots)
    session.commit()

session.close()
print("Hello")